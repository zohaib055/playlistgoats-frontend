{"version":3,"sources":["utils.js","echarts-utils.js","area-pieces-chart.js","bar-line-mixed-chart.js","bar-negative-chart.js","bar-race-chart.js","bar-series-chart.js","bar-stacked-chart.js","bar-timeline-chart.js","bar-waterfall-chart.js","basic-bar-chart.js","basic-candlestick-chart.js","basic-gauge-chart.js","basic-line-chart.js","bubble-chart.js","candle-stick-mixed-chart.js","doughnut-chart.js","doughnut-rounded-chart.js","dynamic-line-chart.js","gauge-grade-chart.js","gauge-multi-ring-chart.js","gauge-multi-title-chart.js","gauge-progress-chart.js","gauge-ring-chart.js","gradient-bar-chart.js","heatmap-chart.js","heatmap-single-series-chart.js","horizontal-bar-chart.js","line-area-chart.js","line-gradient-chart.js","line-log-chart.js","line-marker-chart.js","line-race-chart.js","line-share-dataset-chart.js","map-usa.js","pie-chart.js","pie-edge-align-chart.js","pie-label-align-chart.js","pie-multiple-chart.js","radar-chart.js","radar-customized-chart.js","radar-multiple-chart.js","scatter-basic-chart.js","scatter-quartet.js","scatter-single-axis-chart.js","stacked-area-chart.js","stacked-horizontal-bar-chart.js","stacked-line-chart.js","step-line-chart.js","echarts-example.js"],"names":["docReady","fn","document","readyState","addEventListener","setTimeout","resize","window","isIterableArray","array","Array","isArray","length","camelize","str","text","replace","_","c","toUpperCase","concat","substr","toLowerCase","getData","el","data","JSON","parse","dataset","e","hexToRgb","hexValue","hex","indexOf","substring","result","exec","m","r","g","b","parseInt","rgbaColor","color","arguments","undefined","alpha","getColor","name","dom","documentElement","getComputedStyle","getPropertyValue","trim","getColors","primary","secondary","success","info","warning","danger","light","dark","getSoftColors","getGrays","white","100","200","300","400","500","600","700","800","900","1000","1100","black","hasClass","className","classList","value","includes","addClass","add","getOffset","rect","getBoundingClientRect","scrollLeft","pageXOffset","scrollTop","pageYOffset","top","left","isScrolledIntoView","offsetTop","offsetLeft","width","offsetWidth","height","offsetHeight","offsetParent","all","innerHeight","innerWidth","partial","breakpoints","xs","sm","md","lg","xl","xxl","getBreakpoint","breakpoint","classes","split","filter","cls","pop","setCookie","expire","expires","Date","setTime","getTime","cookie","toUTCString","getCookie","keyValue","match","settings","tinymce","theme","chart","borderColor","newChart","config","ctx","getContext","Chart","getItemFromStore","key","defaultValue","store","localStorage","getItem","_unused","setItemToStore","payload","setItem","getStoreSpace","parseFloat","escape","encodeURIComponent","stringify","toFixed","getDates","startDate","endDate","interval","steps","from","v","i","valueOf","getPastDates","duration","days","date","setDate","getDate","getRandomNumber","min","max","Math","floor","random","utils","getPosition","pos","params","size","contentSize","echartSetOption","userOptions","getDefaultOptions","themeController","body","setOption","merge","_ref","detail","control","tooltipFormatter","tooltipItem","forEach","seriesName","_typeof","dayjs","axisValue","isValid","format","echartsAreaPiecesChartInit","$areaPiecesChartEl","querySelector","echarts","init","tooltip","trigger","padding","backgroundColor","textStyle","borderWidth","transitionDuration","position","axisPointer","type","formatter","xAxis","boundaryGap","axisLine","lineStyle","axisTick","show","axisLabel","margin","splitLine","yAxis","visualMap","dimension","seriesIndex","pieces","gt","lt","series","smooth","symbol","markLine","label","areaStyle","grid","right","bottom","containLabel","echartsBarLineChartInit","months","$barLineChartEl","crossStyle","toolbox","feature","dataView","magicType","restore","saveAsImage","iconStyle","emphasis","textFill","legend","slice","itemStyle","barBorderRadius","yAxisIndex","symbolSize","echartsBarNegativeChartInit","$barNegativeChartEl","stack","echartsBarRaceChartInit","run","$barRaceChartEl","keys","map","round","inverse","animationDuration","animationDurationUpdate","realtimeSort","fontWeight","valueAnimation","animationEasing","animationEasingUpdate","item","setInterval","echartsBarSeriesChartInit","$barSeriesChartEl","echartsBarStackedChartInit","$barStackedChartEl","xAxisData","data1","data2","data3","data4","push","emphasisStyle","shadowBlur","shadowColor","splitArea","echartsBarTimelineChartInit","dataMap","$barTimelineChartEl","dataTI","dataFormatter","obj","Object","reduce","acc","val","_objectSpread","_defineProperty","index","2005","2006","2007","2008","2009","2010","2011","dataSI","dataPI","baseOption","timeline","axisType","autoPlay","playInterval","s","getFullYear","checkpointStyle","shadowOffsetX","shadowOffsetY","controlStyle","title","calculable","options","echartsWaterFallChartInit","$waterfallChartEl","tar","barBorderColor","echartsBasicBarChartInit","$barChartEl","showSymbol","hoverAnimation","echartsBasicCandlestickChartInit","$basicCandleStickChartEl","dataZoom","start","end","minValueSpan","scale","splitNumber","color0","borderColor0","echartsBasicGaugeChartInit","$basicGaugeChartEl","radius","echartsLineChartInit","$lineChartEl","echartsBubbleChartInit","$bubbleChartEl","sqrt","focus","param","echartsCandlestickMixedChartInit","colorList","dates","dataMA5","$candleStickMixedChartEl","dayCount","len","sum","j","calculateMA","animation","elRect","viewSize","link","xAxisIndex","realtime","handleIcon","handleSize","gridIndex","triggerTooltip","echartsDoughnutChartInit","$doughnutChartEl","center","avoidLabelOverlap","labelLine","echartsDoughnutRoundedChartInit","$doughnutRoundedChartEl","orient","borderRadius","echartsDynamicLineChartInit","$dynamicLineChartEl","randomData","now","oneDay","toString","getMonth","join","shift","echartsGaugeGradeChartInit","$gaugeGradeChartEl","startAngle","endAngle","pointer","icon","offsetCenter","distance","echartsGaugeMultiRingChartInit","$gaugeMultiRingChartEl","progress","overlap","roundCap","clip","fontSize","echartsGaugeMultiTitleChartInit","$gaugeMultiTitleChartEl","anchor","showAbove","echartsGaugeProgressChartInit","$gaugeProgressChartEl","echartsGaugeRingChartInit","$gaugeRingChartEl","echartsGradientBarChartInit","dataAxis","$gradientBarChartEl","inside","z","showBackground","graphic","LinearGradient","offset","on","dispatchAction","startValue","dataIndex","zoomSize","endValue","echartsHeatMapChartInit","$echartHeatmapChart","hours","inRange","echartsHeatMapSingleSeriesChartInit","gradientColor","echartsHorizontalBarChartInit","$horizontalBarChartEl","echartsLineAreaChartInit","$lineAreaChartEl","x","y","x2","y2","colorStops","echartsLineGradientChartInit","dateList","valueList","$lineGradientChartEl","echartsLineLogChartInit","$lineLogChartEl","echartsLineMarkerChartInit","$lineMarkerChartEl","markPoint","echartsLineRaceChartInit","$lineRaceChartEl","echartsLineShareDatasetChartInit","$lineShareChartEl","showContent","source","seriesLayoutBy","id","encode","itemName","event","xAxisInfo","axesInfo","echartsUsaMapInit","$usaMapEl","zoom","roam","scaleLimit","areaColor","echartsPieChartInit","$pieChartEl","echartsPieEdgeAlignChartInit","$echartPieAEdgeAlignChartEl","subtext","textAlign","subtextStyle","alignTo","echartsPieLabelAlignChartInit","$echartPieLabelAlignChartEl","bleedMargin","defaultRadius","smallRadius","echartsPieMultipleChartInit","$echartPieMultipleChartEl","echartsRadarChartInit","$radarChartEl","radar","indicator","echartsRadarCustomizedChartInit","getFormatter","indicators","num","shape","radarIndex","echartsRadarMultipleChartInit","getCenter","month","echartsScatterBasicChartInit","$basicScatterChartEl","echartsScatterQuartetChartInit","dataAll","markLineOpt","gridMdUp","gridMdDown","$scatterQuartetChartEl","align","coord","echartsScatterSingleAxisChartInit","$scatterSingleAxisChartEl","animationDelay","idx","echartsStackedAreaChartInit","$stackedAreaChartEl","echartsHorizontalStackedChartInit","$horizontalStackChartEl","echartsStackedLineChartInit","$stackedLineChartEl","echartsStepLineChartInit","$stepLineChartEl","step"],"mappings":"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AAA,QAAA,QAAA,OAAA,SACA,CAAA,WAAA,QAAA,QAAA,QAAA,SACA,CAAA,WAAA,QAAA,OAAA,OAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,QACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,WAAA,QAAA,QAAA,QAAA,SACA,CAAA,WAAA,QAAA,OAAA,QAAA,SACA,CAAA,WAAA,QAAA,QAAA,OAAA,SACA,CAAA,WAAA,QAAA,QAAA,OAAA,SACA,CAAA,WAAA,QAAA,QAAA,QAAA,SACA,CAAA,WAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,OAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,OAAA,KAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,OAAA,SACA,CAAA,YAAA,OAAA,QAAA,QAAA,MACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,KAAA,SACA,CAAA,YAAA,QAAA,OAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,WAAA,QAAA,OAAA,QAAA,SACA,CAAA,WAAA,OAAA,QAAA,QAAA,SACA,CAAA,WAAA,QAAA,QAAA,QAAA,SACA,CAAA,WAAA,QAAA,QAAA,QAAA,SACA,CAAA,WAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,YAAA,QAAA,QAAA,QAAA,SACA,CAAA,Y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,SAAA,SACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,SACA,CAAA,SAAA,SAAA,SAAA,SAAA,SACA,CAAA,SAAA,SAAA,SAAA,SAAA,SACA,CAAA,SAAA,SAAA,SAAA,SAAA,OACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,QAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,QAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,QAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,SACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,QAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,SACA,CAAA,SAAA,SAAA,SAAA,QAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,QAAA,QAAA,SAAA,SAAA,SACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,QAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,MAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,QAAA,SAAA,SAAA,SAAA,SACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,QACA,CAAA,SAAA,QAAA,SAAA,SAAA,QACA,CAAA,SAAA,SAAA,SAAA,SAAA,SACA,CAAA,SAAA,SAAA,SAAA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","file":"echart-example.js","sourcesContent":["/* -------------------------------------------------------------------------- */\r\n/*                                    Utils                                   */\r\n/* -------------------------------------------------------------------------- */\r\nconst docReady = (fn) => {\r\n  // see if DOM is already available\r\n  if (document.readyState === \"loading\") {\r\n    document.addEventListener(\"DOMContentLoaded\", fn);\r\n  } else {\r\n    setTimeout(fn, 1);\r\n  }\r\n};\r\n\r\nconst resize = (fn) => window.addEventListener(\"resize\", fn);\r\n\r\nconst isIterableArray = (array) => Array.isArray(array) && !!array.length;\r\n\r\nconst camelize = (str) => {\r\n  const text = str.replace(/[-_\\s.]+(.)?/g, (_, c) =>\r\n    c ? c.toUpperCase() : \"\"\r\n  );\r\n  return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;\r\n};\r\n\r\nconst getData = (el, data) => {\r\n  try {\r\n    return JSON.parse(el.dataset[camelize(data)]);\r\n  } catch (e) {\r\n    return el.dataset[camelize(data)];\r\n  }\r\n};\r\n\r\n/* ----------------------------- Colors function ---------------------------- */\r\n\r\nconst hexToRgb = (hexValue) => {\r\n  let hex;\r\n  hexValue.indexOf(\"#\") === 0\r\n    ? (hex = hexValue.substring(1))\r\n    : (hex = hexValue);\r\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(\r\n    hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\r\n  );\r\n  return result\r\n    ? [\r\n      parseInt(result[1], 16),\r\n      parseInt(result[2], 16),\r\n      parseInt(result[3], 16),\r\n    ]\r\n    : null;\r\n};\r\n\r\nconst rgbaColor = (color = \"#fff\", alpha = 0.5) =>\r\n  `rgba(${hexToRgb(color)}, ${alpha})`;\r\n\r\n/* --------------------------------- Colors --------------------------------- */\r\n\r\nconst getColor = (name, dom = document.documentElement) =>\r\n  getComputedStyle(dom).getPropertyValue(`--falcon-${name}`).trim();\r\n\r\nconst getColors = (dom) => ({\r\n  primary: getColor(\"primary\", dom),\r\n  secondary: getColor(\"secondary\", dom),\r\n  success: getColor(\"success\", dom),\r\n  info: getColor(\"info\", dom),\r\n  warning: getColor(\"warning\", dom),\r\n  danger: getColor(\"danger\", dom),\r\n  light: getColor(\"light\", dom),\r\n  dark: getColor(\"dark\", dom),\r\n});\r\n\r\nconst getSoftColors = (dom) => ({\r\n  primary: getColor(\"soft-primary\", dom),\r\n  secondary: getColor(\"soft-secondary\", dom),\r\n  success: getColor(\"soft-success\", dom),\r\n  info: getColor(\"soft-info\", dom),\r\n  warning: getColor(\"soft-warning\", dom),\r\n  danger: getColor(\"soft-danger\", dom),\r\n  light: getColor(\"soft-light\", dom),\r\n  dark: getColor(\"soft-dark\", dom),\r\n});\r\n\r\nconst getGrays = (dom) => ({\r\n  white: getColor(\"white\", dom),\r\n  100: getColor(\"100\", dom),\r\n  200: getColor(\"200\", dom),\r\n  300: getColor(\"300\", dom),\r\n  400: getColor(\"400\", dom),\r\n  500: getColor(\"500\", dom),\r\n  600: getColor(\"600\", dom),\r\n  700: getColor(\"700\", dom),\r\n  800: getColor(\"800\", dom),\r\n  900: getColor(\"900\", dom),\r\n  1000: getColor(\"1000\", dom),\r\n  1100: getColor(\"1100\", dom),\r\n  black: getColor(\"black\", dom),\r\n});\r\n\r\nconst hasClass = (el, className) => {\r\n  !el && false;\r\n  return el.classList.value.includes(className);\r\n};\r\n\r\nconst addClass = (el, className) => {\r\n  el.classList.add(className);\r\n};\r\n\r\nconst getOffset = (el) => {\r\n  const rect = el.getBoundingClientRect();\r\n  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\r\n  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n  return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\r\n};\r\n\r\nconst isScrolledIntoView = (el) => {\r\n  let top = el.offsetTop;\r\n  let left = el.offsetLeft;\r\n  const width = el.offsetWidth;\r\n  const height = el.offsetHeight;\r\n\r\n  while (el.offsetParent) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    el = el.offsetParent;\r\n    top += el.offsetTop;\r\n    left += el.offsetLeft;\r\n  }\r\n\r\n  return {\r\n    all:\r\n      top >= window.pageYOffset &&\r\n      left >= window.pageXOffset &&\r\n      top + height <= window.pageYOffset + window.innerHeight &&\r\n      left + width <= window.pageXOffset + window.innerWidth,\r\n    partial:\r\n      top < window.pageYOffset + window.innerHeight &&\r\n      left < window.pageXOffset + window.innerWidth &&\r\n      top + height > window.pageYOffset &&\r\n      left + width > window.pageXOffset,\r\n  };\r\n};\r\n\r\nconst breakpoints = {\r\n  xs: 0,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1540,\r\n};\r\n\r\nconst getBreakpoint = (el) => {\r\n  const classes = el && el.classList.value;\r\n  let breakpoint;\r\n  if (classes) {\r\n    breakpoint =\r\n      breakpoints[\r\n      classes\r\n        .split(\" \")\r\n        .filter((cls) => cls.includes(\"navbar-expand-\"))\r\n        .pop()\r\n        .split(\"-\")\r\n        .pop()\r\n      ];\r\n  }\r\n  return breakpoint;\r\n};\r\n\r\n/* --------------------------------- Cookie --------------------------------- */\r\n\r\nconst setCookie = (name, value, expire) => {\r\n  const expires = new Date();\r\n  expires.setTime(expires.getTime() + expire);\r\n  document.cookie = name + \"=\" + value + \";expires=\" + expires.toUTCString();\r\n};\r\n\r\nconst getCookie = (name) => {\r\n  var keyValue = document.cookie.match(\"(^|;) ?\" + name + \"=([^;]*)(;|$)\");\r\n  return keyValue ? keyValue[2] : keyValue;\r\n};\r\n\r\nconst settings = {\r\n  tinymce: {\r\n    theme: \"oxide\",\r\n  },\r\n  chart: {\r\n    borderColor: \"rgba(255, 255, 255, 0.8)\",\r\n  },\r\n};\r\n\r\n/* -------------------------- Chart Initialization -------------------------- */\r\n\r\nconst newChart = (chart, config) => {\r\n  const ctx = chart.getContext(\"2d\");\r\n  return new window.Chart(ctx, config);\r\n};\r\n\r\n/* ---------------------------------- Store --------------------------------- */\r\n\r\nconst getItemFromStore = (key, defaultValue, store = localStorage) => {\r\n  try {\r\n    return JSON.parse(store.getItem(key)) || defaultValue;\r\n  } catch {\r\n    return store.getItem(key) || defaultValue;\r\n  }\r\n};\r\n\r\nconst setItemToStore = (key, payload, store = localStorage) =>\r\n  store.setItem(key, payload);\r\nconst getStoreSpace = (store = localStorage) =>\r\n  parseFloat(\r\n    (\r\n      escape(encodeURIComponent(JSON.stringify(store))).length /\r\n      (1024 * 1024)\r\n    ).toFixed(2)\r\n  );\r\n\r\n/* get Dates between */\r\n\r\nconst getDates = (startDate, endDate, interval = 1000 * 60 * 60 * 24) => {\r\n  const duration = endDate - startDate;\r\n  const steps = duration / interval;\r\n  return Array.from({ length: steps + 1 },\r\n    (v, i) => new Date(startDate.valueOf() + (interval * i))\r\n  );\r\n}\r\n\r\nconst getPastDates = (duration) => {\r\n  let days;\r\n\r\n  switch (duration) {\r\n    case 'week':\r\n      days = 7;\r\n      break;\r\n    case 'month':\r\n      days = 30;\r\n      break;\r\n    case 'year':\r\n      days = 365;\r\n      break;\r\n\r\n    default:\r\n      days = duration;\r\n  }\r\n\r\n  const date = new Date();\r\n  const endDate = date;\r\n  const startDate = new Date(new Date().setDate(date.getDate() - (days - 1)));\r\n  return getDates(startDate, endDate);\r\n}\r\n\r\n/* Get Random Number */\r\nconst getRandomNumber = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nconst utils = {\r\n  docReady,\r\n  resize,\r\n  isIterableArray,\r\n  camelize,\r\n  getData,\r\n  hasClass,\r\n  addClass,\r\n  hexToRgb,\r\n  rgbaColor,\r\n  getColor,\r\n  getColors,\r\n  getSoftColors,\r\n  getGrays,\r\n  getOffset,\r\n  isScrolledIntoView,\r\n  getBreakpoint,\r\n  setCookie,\r\n  getCookie,\r\n  newChart,\r\n  settings,\r\n  getItemFromStore,\r\n  setItemToStore,\r\n  getStoreSpace,\r\n  getDates,\r\n  getPastDates,\r\n  getRandomNumber,\r\n};\r\n\r\nexport default utils;\r\n","/* eslint-disable */\r\nconst getPosition = (pos, params, dom, rect, size) => ({\r\n  top: pos[1] - size.contentSize[1] - 10,\r\n  left: pos[0] - size.contentSize[0] / 2\r\n});\r\n\r\nconst echartSetOption = (chart, userOptions, getDefaultOptions) => {\r\n  const themeController = document.body;\r\n  // Merge user options with lodash\r\n  chart.setOption(window._.merge(getDefaultOptions(), userOptions));\r\n\r\n  themeController.addEventListener('clickControl', ({ detail: { control } }) => {\r\n    if (control === 'theme') {\r\n      chart.setOption(window._.merge(getDefaultOptions(), userOptions));\r\n    }\r\n  });\r\n};\r\n\r\nconst tooltipFormatter = params => {\r\n  let tooltipItem = ``;\r\n  params.forEach(el => {\r\n    tooltipItem =\r\n      tooltipItem +\r\n      `<div class='ms-1'> \r\n        <h6 class=\"text-700\"><span class=\"fas fa-circle me-1 fs--2\" style=\"color:${\r\n          el.borderColor ? el.borderColor : el.color\r\n        }\"></span>\r\n          ${el.seriesName} : ${typeof el.value === 'object' ? el.value[1] : el.value}\r\n        </h6>\r\n      </div>`;\r\n  });\r\n  return `<div>\r\n            <p class='mb-2 text-600'>\r\n              ${\r\n                window.dayjs(params[0].axisValue).isValid()\r\n                  ? window.dayjs(params[0].axisValue).format('MMMM DD')\r\n                  : params[0].axisValue\r\n              }\r\n            </p>\r\n            ${tooltipItem}\r\n          </div>`;\r\n};\r\n\r\nexport default { getPosition, echartSetOption, tooltipFormatter };\r\n","import utils from '../../../utils';\r\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                      Echarts Area Pieces Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsAreaPiecesChartInit = () => {\r\n  const $areaPiecesChartEl = document.querySelector('.echart-area-pieces-chart-example');\r\n\r\n  if ($areaPiecesChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($areaPiecesChartEl, 'options');\r\n    const chart = window.echarts.init($areaPiecesChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        position(pos, params, dom, rect, size) {\r\n          return getPosition(pos, params, dom, rect, size);\r\n        },\r\n        axisPointer: {\r\n          type: 'none'\r\n        },\r\n        formatter: tooltipFormatter\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        boundaryGap: false,\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          color: utils.getGrays()['400'],\r\n          margin: 15,\r\n          formatter: value => window.dayjs(value).format('MMM DD')\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        boundaryGap: false,\r\n        axisLabel: {\r\n          show: true,\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        axisTick: { show: false },\r\n        axisLine: { show: false }\r\n      },\r\n      visualMap: {\r\n        type: 'piecewise',\r\n        show: false,\r\n        dimension: 0,\r\n        seriesIndex: 0,\r\n        pieces: [\r\n          {\r\n            gt: 1,\r\n            lt: 3,\r\n            color: utils.rgbaColor(utils.getColor('primary'), 0.4)\r\n          },\r\n          {\r\n            gt: 5,\r\n            lt: 7,\r\n            color: utils.rgbaColor(utils.getColor('primary'), 0.4)\r\n          }\r\n        ]\r\n      },\r\n      series: [\r\n        {\r\n          type: 'line',\r\n          name: 'Total',\r\n          smooth: 0.6,\r\n          symbol: 'none',\r\n          lineStyle: {\r\n            color: utils.getColor('primary'),\r\n            width: 5\r\n          },\r\n          markLine: {\r\n            symbol: ['none', 'none'],\r\n            label: { show: false },\r\n            data: [{ xAxis: 1 }, { xAxis: 3 }, { xAxis: 5 }, { xAxis: 7 }]\r\n          },\r\n          areaStyle: {},\r\n          data: [\r\n            ['2019-10-10', 200],\r\n            ['2019-10-11', 560],\r\n            ['2019-10-12', 750],\r\n            ['2019-10-13', 580],\r\n            ['2019-10-14', 250],\r\n            ['2019-10-15', 300],\r\n            ['2019-10-16', 450],\r\n            ['2019-10-17', 300],\r\n            ['2019-10-18', 100]\r\n          ]\r\n        }\r\n      ],\r\n      grid: { right: 20, left: 5, bottom: 5, top: 8, containLabel: true }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsAreaPiecesChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Bar Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsBarLineChartInit = () => {\r\n  const $barLineChartEl = document.querySelector('.echart-bar-line-chart-example');\r\n\r\n  if ($barLineChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($barLineChartEl, 'options');\r\n    const chart = window.echarts.init($barLineChartEl);\r\n\r\n    const months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December'\r\n    ];\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          type: 'cross',\r\n          crossStyle: {\r\n            color: utils.getGrays()['500']\r\n          },\r\n          label: {\r\n            show: true,\r\n            backgroundColor: utils.getGrays()['600'],\r\n            color: utils.getGrays()['100']\r\n          }\r\n        },\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        formatter: tooltipFormatter\r\n      },\r\n      toolbox: {\r\n        top: 0,\r\n        feature: {\r\n          dataView: { show: false },\r\n          magicType: {\r\n            show: true,\r\n            type: ['line', 'bar']\r\n          },\r\n          restore: { show: true },\r\n          saveAsImage: { show: true }\r\n        },\r\n        iconStyle: {\r\n          borderColor: utils.getGrays()['700'],\r\n          borderWidth: 1\r\n        },\r\n\r\n        emphasis: {\r\n          iconStyle: {\r\n            textFill: utils.getGrays()['600']\r\n          }\r\n        }\r\n      },\r\n      legend: {\r\n        top: 40,\r\n        data: ['Evaporation', 'Precipitation', 'Average temperature'],\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        }\r\n      },\r\n      xAxis: [\r\n        {\r\n          type: 'category',\r\n          data: months,\r\n          axisLabel: {\r\n            color: utils.getGrays()['600'],\r\n            formatter: value => value.slice(0, 3)\r\n          },\r\n          axisPointer: {\r\n            type: 'shadow'\r\n          },\r\n          axisLine: {\r\n            show: true,\r\n            lineStyle: {\r\n              color: utils.getGrays()['300']\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      yAxis: [\r\n        {\r\n          type: 'value',\r\n          min: 0,\r\n          max: 250,\r\n          interval: 50,\r\n          axisLabel: {\r\n            color: utils.getGrays()['600'],\r\n            formatter: '{value} ml'\r\n          },\r\n          splitLine: {\r\n            show: true,\r\n            lineStyle: {\r\n              color: utils.getGrays()['200']\r\n            }\r\n          }\r\n        },\r\n        {\r\n          type: 'value',\r\n          min: 0,\r\n          max: 25,\r\n          interval: 5,\r\n          axisLabel: {\r\n            color: utils.getGrays()['600'],\r\n            formatter: '{value} °C'\r\n          },\r\n\r\n          splitLine: {\r\n            show: true,\r\n            lineStyle: {\r\n              color: utils.getGrays()['200']\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      series: [\r\n        {\r\n          name: 'Evaporation',\r\n          type: 'bar',\r\n          data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3],\r\n          itemStyle: {\r\n            color: utils.getColor('primary'),\r\n            barBorderRadius: [3, 3, 0, 0]\r\n          }\r\n        },\r\n        {\r\n          name: 'Precipitation',\r\n          type: 'bar',\r\n          data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3],\r\n          itemStyle: {\r\n            color: utils.getColor('info'),\r\n            barBorderRadius: [3, 3, 0, 0]\r\n          }\r\n        },\r\n        {\r\n          name: 'Average temperature',\r\n          type: 'line',\r\n          yAxisIndex: 1,\r\n          data: [2.0, 2.2, 3.3, 4.5, 6.3, 10.2, 20.3, 23.4, 23.0, 16.5, 12.0, 6.2],\r\n          lineStyle: {\r\n            color: utils.getColor('warning')\r\n          },\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('warning'),\r\n            borderWidth: 2\r\n          },\r\n          symbol: 'circle',\r\n          symbolSize: 10\r\n        }\r\n      ],\r\n      grid: {\r\n        right: 5,\r\n        left: 5,\r\n        bottom: 5,\r\n        top: '23%',\r\n        containLabel: true\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsBarLineChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Bar Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsBarNegativeChartInit = () => {\r\n  const $barNegativeChartEl = document.querySelector('.echart-bar-chart-negative-example');\r\n\r\n  if ($barNegativeChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($barNegativeChartEl, 'options');\r\n    const chart = window.echarts.init($barNegativeChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          type: 'shadow'\r\n        },\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        formatter: tooltipFormatter\r\n      },\r\n      grid: {\r\n        top: 5,\r\n        bottom: 5,\r\n        left: 5,\r\n        right: 5\r\n      },\r\n      xAxis: {\r\n        type: 'value',\r\n        position: 'top',\r\n        splitLine: {\r\n          lineStyle: {\r\n            type: 'dashed',\r\n            color: utils.getGrays()['200']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'category',\r\n        axisLine: { show: false },\r\n        axisLabel: { show: false },\r\n        axisTick: { show: false },\r\n        splitLine: { show: false },\r\n        data: ['Ten', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Cost',\r\n          type: 'bar',\r\n          stack: 'total',\r\n          label: {\r\n            show: true,\r\n            formatter: '{b}',\r\n            color: '#fff'\r\n          },\r\n          itemStyle: {\r\n            color: utils.getColor('primary')\r\n          },\r\n          data: [-0.12, -0.19, 0.2, 0.44, -0.23, 0.08, -0.17, 0.47, -0.36, 0.18]\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsBarNegativeChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                         Echarts Bar Race Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsBarRaceChartInit = () => {\r\n  const $barRaceChartEl = document.querySelector('.echart-bar-race-chart-example');\r\n\r\n  if ($barRaceChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($barRaceChartEl, 'options');\r\n    const chart = window.echarts.init($barRaceChartEl);\r\n\r\n    let data = Array.from(Array(7).keys()).map(() => Math.round(Math.random() * 200));\r\n\r\n    const getDefaultOptions = () => ({\r\n      xAxis: {\r\n        max: 'dataMax',\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        axisLabel: {\r\n          color: utils.getGrays()['500']\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'category',\r\n        data: ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\r\n        inverse: true,\r\n        axisLabel: {\r\n          color: utils.getGrays()['500']\r\n        },\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        },\r\n        axisTick: {\r\n          show: false\r\n        },\r\n        animationDuration: 300,\r\n        animationDurationUpdate: 300,\r\n        max: 4 // only the largest 5 bars will be displayed\r\n      },\r\n      series: [\r\n        {\r\n          realtimeSort: true,\r\n          name: 'X',\r\n          type: 'bar',\r\n          data: data,\r\n          label: {\r\n            show: true,\r\n            position: 'right',\r\n            color: utils.getGrays()['700'],\r\n            fontWeight: 500,\r\n            valueAnimation: true\r\n          },\r\n          itemStyle: {\r\n            color: utils.getColor('primary'),\r\n            barBorderRadius: [0, 3, 3, 0]\r\n          }\r\n        }\r\n      ],\r\n      animationDuration: 0,\r\n      animationDurationUpdate: 3000,\r\n      animationEasing: 'linear',\r\n      animationEasingUpdate: 'linear',\r\n      grid: {\r\n        right: '10%',\r\n        left: 5,\r\n        bottom: 5,\r\n        top: 5,\r\n        containLabel: true\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n\r\n    const run = () => {\r\n      data = data.map(item =>\r\n        Math.random() > 0.9\r\n          ? item + Math.round(Math.random() * 2000)\r\n          : item + Math.round(Math.random() * 200)\r\n      );\r\n\r\n      chart.setOption({\r\n        series: [\r\n          {\r\n            data\r\n          }\r\n        ]\r\n      });\r\n    };\r\n\r\n    setTimeout(function () {\r\n      run();\r\n    }, 0);\r\n    setInterval(function () {\r\n      run();\r\n    }, 3000);\r\n  }\r\n};\r\n\r\nexport default echartsBarRaceChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Bar Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsBarSeriesChartInit = () => {\r\n  const $barSeriesChartEl = document.querySelector('.echart-bar-chart-series-example');\r\n\r\n  if ($barSeriesChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($barSeriesChartEl, 'options');\r\n    const chart = window.echarts.init($barSeriesChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      color: [utils.getColor('primary'), utils.getColor('info')],\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          type: 'shadow'\r\n        },\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        formatter: tooltipFormatter\r\n      },\r\n      xAxis: {\r\n        type: 'value',\r\n        axisLabel: {\r\n          formatter: value => `${value / 1000}k`,\r\n          color: utils.getGrays()['500']\r\n        },\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        splitLine: {\r\n          lineStyle: {\r\n            type: 'dashed',\r\n            color: utils.getGrays()['200']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'category',\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        axisLabel: {\r\n          color: utils.getGrays()['500']\r\n        },\r\n        axisTick: { show: false },\r\n        splitLine: { show: false },\r\n        data: ['Brazil', 'Indonesia', 'USA', 'India', 'China']\r\n      },\r\n      series: [\r\n        {\r\n          name: '2011',\r\n          type: 'bar',\r\n          data: [18203, 23489, 29034, 104970, 131744],\r\n          itemStyle: {\r\n            barBorderRadius: [0, 3, 3, 0]\r\n          }\r\n        },\r\n        {\r\n          name: '2012',\r\n          type: 'bar',\r\n          data: [19325, 23438, 31000, 121594, 134141],\r\n          itemStyle: {\r\n            barBorderRadius: [0, 3, 3, 0]\r\n          }\r\n        }\r\n      ],\r\n      grid: { right: 15, left: '12%', bottom: '10%', top: 5 }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsBarSeriesChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Bar Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsBarStackedChartInit = () => {\r\n  const $barStackedChartEl = document.querySelector('.echart-bar-stacked-chart-example');\r\n\r\n  if ($barStackedChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($barStackedChartEl, 'options');\r\n    const chart = window.echarts.init($barStackedChartEl);\r\n\r\n    let xAxisData = [];\r\n    let data1 = [];\r\n    let data2 = [];\r\n    let data3 = [];\r\n    let data4 = [];\r\n\r\n    for (let i = 0; i < 10; i += 1) {\r\n      xAxisData.push('Class' + (i + 1));\r\n      data1.push((Math.random() * 2).toFixed(2));\r\n      data2.push((Math.random() * 5).toFixed(2));\r\n      data3.push((Math.random() + 0.3).toFixed(2));\r\n      data4.push(-Math.random().toFixed(2));\r\n    }\r\n\r\n    const emphasisStyle = {\r\n      itemStyle: {\r\n        shadowBlur: 10,\r\n        shadowColor: utils.rgbaColor(utils.getColor('dark'), 0.3)\r\n      }\r\n    };\r\n\r\n    const getDefaultOptions = () => ({\r\n      color: [\r\n        utils.getColor('primary'),\r\n        utils.getColor('info'),\r\n        utils.getColor('warning'),\r\n        utils.getColor('danger')\r\n      ],\r\n      legend: {\r\n        data: ['Bar1', 'Bar2', 'Bar3', 'Bar4'],\r\n        textStyle: {\r\n          color: utils.getGrays()['700']\r\n        },\r\n        left: 0\r\n      },\r\n      toolbox: {\r\n        feature: {\r\n          magicType: {\r\n            type: ['stack', 'tiled']\r\n          }\r\n        },\r\n        iconStyle: {\r\n          borderColor: utils.getGrays()['700'],\r\n          borderWidth: 1\r\n        }\r\n      },\r\n      tooltip: {\r\n        trigger: 'item',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n      xAxis: {\r\n        data: xAxisData,\r\n        splitLine: { show: false },\r\n        splitArea: { show: false },\r\n\r\n        axisLabel: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['400']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        axisLabel: {\r\n          color: utils.getGrays()['600']\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Bar1',\r\n          type: 'bar',\r\n          stack: 'one',\r\n          emphasis: emphasisStyle,\r\n          data: data1\r\n        },\r\n        {\r\n          name: 'Bar2',\r\n          type: 'bar',\r\n          stack: 'one',\r\n          emphasis: emphasisStyle,\r\n          data: data2\r\n        },\r\n        {\r\n          name: 'Bar3',\r\n          type: 'bar',\r\n          stack: 'two',\r\n          emphasis: emphasisStyle,\r\n          data: data3\r\n        },\r\n        {\r\n          name: 'Bar4',\r\n          type: 'bar',\r\n          stack: 'two',\r\n          emphasis: emphasisStyle,\r\n          data: data4\r\n        }\r\n      ],\r\n      grid: {\r\n        top: '10%',\r\n        bottom: 10,\r\n        left: 5,\r\n        right: 7,\r\n        containLabel: true\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsBarStackedChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                         Echarts Bar Timeline Chart                         */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsBarTimelineChartInit = () => {\r\n  const $barTimelineChartEl = document.querySelector('.echart-bar-timeline-chart-example');\r\n\r\n  if ($barTimelineChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($barTimelineChartEl, 'options');\r\n    const chart = window.echarts.init($barTimelineChartEl);\r\n\r\n    const months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December'\r\n    ];\r\n\r\n    let dataMap = {};\r\n\r\n    const dataFormatter = obj => {\r\n      return Object.keys(obj).reduce((acc, val) => {\r\n        return {\r\n          ...acc,\r\n          [val]: obj[val].map((value, index) => ({\r\n            name: months[index],\r\n            value\r\n          }))\r\n        };\r\n      }, {});\r\n    };\r\n\r\n    dataMap.dataTI = dataFormatter({\r\n      2005: [\r\n        88.68, 112.38, 1400, 262.42, 589.56, 882.41, 625.61, 684.6, 90.26, 1461.51, 892.83, 966.5\r\n      ],\r\n      2006: [\r\n        88.8, 103.35, 1461.81, 276.77, 634.94, 939.43, 672.76, 750.14, 93.81, 1545.05, 925.1,\r\n        1011.03\r\n      ],\r\n      2007: [\r\n        101.26, 110.19, 1804.72, 311.97, 762.1, 1133.42, 783.8, 915.38, 101.84, 1816.31, 986.02,\r\n        1200.18\r\n      ],\r\n      2008: [\r\n        112.83, 122.58, 2034.59, 313.58, 907.95, 1302.02, 916.72, 1088.94, 111.8, 2100.11, 1095.96,\r\n        1418.09\r\n      ],\r\n      2009: [\r\n        118.29, 128.85, 2207.34, 477.59, 929.6, 1414.9, 980.57, 1154.33, 113.82, 2261.86, 1163.08,\r\n        1495.45\r\n      ],\r\n      2010: [\r\n        124.36, 145.58, 2562.81, 554.48, 1095.28, 1631.08, 1050.15, 1302.9, 114.15, 2540.1, 1360.56,\r\n        1729.02\r\n      ],\r\n      2011: [\r\n        136.27, 159.72, 2905.73, 641.42, 1306.3, 1915.57, 1277.44, 1701.5, 124.94, 3064.78, 1583.04,\r\n        2015.31\r\n      ]\r\n    });\r\n\r\n    dataMap.dataSI = dataFormatter({\r\n      2005: [\r\n        2026.51, 2135.07, 5271.57, 2357.04, 1773.21, 3869.4, 1580.83, 2971.68, 4381.2, 10524.96,\r\n        7164.75, 2245.9\r\n      ],\r\n      2006: [\r\n        2191.43, 2457.08, 6110.43, 2755.66, 2374.96, 4566.83, 1915.29, 3365.31, 4969.95, 12282.89,\r\n        8511.51, 2711.18\r\n      ],\r\n      2007: [\r\n        2509.4, 2892.53, 7201.88, 3454.49, 3193.67, 5544.14, 2475.45, 3695.58, 5571.06, 14471.26,\r\n        10154.25, 3370.96\r\n      ],\r\n      2008: [\r\n        2626.41, 3709.78, 8701.34, 4242.36, 4376.19, 7158.84, 3097.12, 4319.75, 6085.84, 16993.34,\r\n        11567.42, 4198.93\r\n      ],\r\n      2009: [\r\n        2855.55, 3987.84, 8959.83, 3993.8, 5114, 7906.34, 3541.92, 4060.72, 6001.78, 18566.37,\r\n        11908.49, 4905.22\r\n      ],\r\n      2010: [\r\n        3388.38, 4840.23, 10707.68, 5234, 6367.69, 9976.82, 4506.31, 5025.15, 7218.32, 21753.93,\r\n        14297.93, 6436.62\r\n      ],\r\n      2011: [\r\n        3752.48, 5928.32, 13126.86, 6635.26, 8037.69, 12152.15, 5611.48, 5962.41, 7927.89, 25203.28,\r\n        16555.58, 8309.38\r\n      ]\r\n    });\r\n\r\n    dataMap.dataPI = dataFormatter({\r\n      2005: [\r\n        4854.33, 1658.19, 3340.54, 1611.07, 1542.26, 3295.45, 1413.83, 1857.42, 4776.2, 6612.22,\r\n        5360.1, 2137.77\r\n      ],\r\n      2006: [\r\n        5837.55, 1902.31, 3895.36, 1846.18, 1934.35, 3798.26, 1687.07, 2096.35, 5508.48, 7914.11,\r\n        6281.86, 2390.29\r\n      ],\r\n      2007: [\r\n        7236.15, 2250.04, 4600.72, 2257.99, 2467.41, 4486.74, 2025.44, 2493.04, 6821.11, 9730.91,\r\n        7613.46, 2789.78\r\n      ],\r\n      2008: [\r\n        8375.76, 2886.65, 5276.04, 2759.46, 3212.06, 5207.72, 2412.26, 2905.68, 7872.23, 11888.53,\r\n        8799.31, 3234.64\r\n      ],\r\n      2009: [\r\n        9179.19, 3405.16, 6068.31, 2886.92, 3696.65, 5891.25, 2756.26, 3371.95, 8930.85, 13629.07,\r\n        9918.78, 3662.15\r\n      ],\r\n      2010: [\r\n        10600.84, 4238.65, 7123.77, 3412.38, 4209.03, 6849.37, 3111.12, 4040.55, 9833.51, 17131.45,\r\n        12063.82, 4193.69\r\n      ],\r\n      2011: [\r\n        12363.18, 5219.24, 8483.17, 3960.87, 5015.89, 8158.98, 3679.91, 4918.09, 11142.86, 20842.21,\r\n        14180.23, 4975.96\r\n      ]\r\n    });\r\n\r\n    const getDefaultOptions = () => ({\r\n      baseOption: {\r\n        timeline: {\r\n          axisType: 'category',\r\n          autoPlay: true,\r\n          playInterval: 1000,\r\n          data: [\r\n            '2005-01-01',\r\n            '2006-01-01',\r\n            '2007-01-01',\r\n            '2008-01-01',\r\n            '2009-01-01',\r\n            '2010-01-01',\r\n            '2011-01-01'\r\n          ],\r\n          label: {\r\n            formatter: function (s) {\r\n              return new Date(s).getFullYear();\r\n            }\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('info')\r\n          },\r\n          itemStyle: {\r\n            color: utils.getColor('secondary')\r\n          },\r\n          checkpointStyle: {\r\n            color: utils.getColor('primary'),\r\n            shadowBlur: 0,\r\n            shadowOffsetX: 0,\r\n            shadowOffsetY: 0\r\n          },\r\n          controlStyle: {\r\n            color: utils.getColor('info')\r\n          }\r\n        },\r\n        title: {\r\n          textStyle: {\r\n            color: utils.getGrays()['700']\r\n          }\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'shadow'\r\n          },\r\n          padding: [7, 10],\r\n          backgroundColor: utils.getGrays()['100'],\r\n          borderColor: utils.getGrays()['300'],\r\n          textStyle: { color: utils.getColors().dark },\r\n          borderWidth: 1,\r\n          transitionDuration: 0,\r\n          formatter: tooltipFormatter\r\n        },\r\n        legend: {\r\n          left: 'right',\r\n          data: ['Primary industry', 'Secondary industry', 'Tertiary Industry'],\r\n          textStyle: {\r\n            color: utils.getGrays()['700']\r\n          }\r\n        },\r\n        calculable: true,\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            data: months,\r\n            splitLine: { show: false },\r\n            axisLabel: {\r\n              color: utils.getGrays()['600']\r\n            },\r\n            axisLine: {\r\n              lineStyle: {\r\n                color: utils.getGrays()['400']\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: 'value',\r\n            axisLabel: {\r\n              formatter: value => `${value / 1000}k`,\r\n              color: utils.getGrays()['600']\r\n            },\r\n            splitLine: {\r\n              lineStyle: {\r\n                color: utils.getGrays()['200']\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: 'Primary industry',\r\n            type: 'bar',\r\n            itemStyle: {\r\n              color: utils.getColor('primary'),\r\n              barBorderRadius: [3, 3, 0, 0]\r\n            }\r\n          },\r\n          {\r\n            name: 'Secondary industry',\r\n            type: 'bar',\r\n            itemStyle: {\r\n              color: utils.getColor('info'),\r\n              barBorderRadius: [3, 3, 0, 0]\r\n            }\r\n          },\r\n          {\r\n            name: 'Tertiary Industry',\r\n            type: 'bar',\r\n            itemStyle: {\r\n              color: utils.getColor('warning'),\r\n              barBorderRadius: [3, 3, 0, 0]\r\n            }\r\n          }\r\n        ],\r\n        grid: {\r\n          top: '10%',\r\n          bottom: '15%',\r\n          left: 5,\r\n          right: 10,\r\n          containLabel: true\r\n        }\r\n      },\r\n      options: [\r\n        {\r\n          title: { text: '2005' },\r\n          series: [\r\n            { data: dataMap.dataPI['2005'] },\r\n            { data: dataMap.dataSI['2005'] },\r\n            { data: dataMap.dataTI['2005'] }\r\n          ]\r\n        },\r\n        {\r\n          title: { text: '2006' },\r\n          series: [\r\n            { data: dataMap.dataPI['2006'] },\r\n            { data: dataMap.dataSI['2006'] },\r\n            { data: dataMap.dataTI['2006'] }\r\n          ]\r\n        },\r\n        {\r\n          title: { text: '2007' },\r\n          series: [\r\n            { data: dataMap.dataPI['2007'] },\r\n            { data: dataMap.dataSI['2007'] },\r\n            { data: dataMap.dataTI['2007'] }\r\n          ]\r\n        },\r\n        {\r\n          title: { text: '2008' },\r\n          series: [\r\n            { data: dataMap.dataPI['2008'] },\r\n            { data: dataMap.dataSI['2008'] },\r\n            { data: dataMap.dataTI['2008'] }\r\n          ]\r\n        },\r\n        {\r\n          title: { text: '2009' },\r\n          series: [\r\n            { data: dataMap.dataPI['2009'] },\r\n            { data: dataMap.dataSI['2009'] },\r\n            { data: dataMap.dataTI['2009'] }\r\n          ]\r\n        },\r\n        {\r\n          title: { text: '2010' },\r\n          series: [\r\n            { data: dataMap.dataPI['2010'] },\r\n            { data: dataMap.dataSI['2010'] },\r\n            { data: dataMap.dataTI['2010'] }\r\n          ]\r\n        },\r\n        {\r\n          title: { text: '2011' },\r\n          series: [\r\n            { data: dataMap.dataPI['2011'] },\r\n            { data: dataMap.dataSI['2011'] },\r\n            { data: dataMap.dataTI['2011'] }\r\n          ]\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsBarTimelineChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Bar Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsWaterFallChartInit = () => {\r\n  const $waterfallChartEl = document.querySelector('.echart-nightfall-chart-example');\r\n\r\n  if ($waterfallChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($waterfallChartEl, 'options');\r\n    const chart = window.echarts.init($waterfallChartEl);\r\n\r\n    const days = [\r\n      '2021-06-05',\r\n      '2021-06-06',\r\n      '2021-06-07',\r\n      '2021-06-08',\r\n      '2021-06-09',\r\n      '2021-06-10',\r\n      '2021-06-11',\r\n      '2021-06-12',\r\n      '2021-06-13',\r\n      '2021-06-14',\r\n      '2021-06-15'\r\n    ];\r\n\r\n    const getDefaultOptions = () => ({\r\n      legend: {\r\n        data: ['Expenditure', 'Income'],\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        }\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        /* eslint-disable prefer-destructuring */\r\n        formatter: function (params) {\r\n          var tar;\r\n          if (params[1].value !== '-') {\r\n            tar = params[1];\r\n          } else {\r\n            tar = params[2];\r\n          }\r\n          return (\r\n            window.dayjs(tar.name).format('MMM DD') + '<br/>' + tar.seriesName + ' : ' + tar.value\r\n          );\r\n        },\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'shadow'\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: days,\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          color: utils.getGrays()['400'],\r\n          formatter: value => window.dayjs(value).format('MMM DD'),\r\n          margin: 15\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        boundaryGap: true,\r\n        axisLabel: {\r\n          show: true,\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        splitLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLine: { show: false },\r\n        min: 600\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Assist',\r\n          type: 'bar',\r\n          stack: 'Total',\r\n          itemStyle: {\r\n            barBorderColor: 'transparent',\r\n            color: 'transparent'\r\n          },\r\n          emphasis: {\r\n            itemStyle: {\r\n              barBorderColor: 'transparent',\r\n              color: 'transparent'\r\n            }\r\n          },\r\n          data: [0, 900, 1245, 1530, 1376, 1376, 1511, 1689, 1856, 1495, 1292]\r\n        },\r\n        {\r\n          name: 'Income',\r\n          type: 'bar',\r\n          stack: 'Total',\r\n          label: {\r\n            show: true,\r\n            position: 'top',\r\n            color: utils.getGrays()['600']\r\n          },\r\n          data: [900, 345, 393, '-', '-', 135, 178, 286, '-', '-', '-'],\r\n          itemStyle: {\r\n            color: utils.getColor('primary'),\r\n            barBorderRadius: [3, 3, 0, 0]\r\n          }\r\n        },\r\n        {\r\n          name: 'Expenditure',\r\n          type: 'bar',\r\n          stack: 'Total',\r\n          label: {\r\n            show: true,\r\n            position: 'bottom',\r\n            color: utils.getGrays()['600']\r\n          },\r\n          data: ['-', '-', '-', 108, 154, '-', '-', '-', 119, 361, 203],\r\n          itemStyle: {\r\n            color: utils.getColor('success'),\r\n            barBorderRadius: [3, 3, 0, 0]\r\n          }\r\n        }\r\n      ],\r\n      grid: { right: '3%', left: '10%', bottom: '10%', top: '10%' }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsWaterFallChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Bar Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsBasicBarChartInit = () => {\r\n  const $barChartEl = document.querySelector('.echart-basic-bar-chart-example');\r\n\r\n  if ($barChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($barChartEl, 'options');\r\n    const chart = window.echarts.init($barChartEl);\r\n\r\n    const months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December'\r\n    ];\r\n\r\n    const data = [1272, 1301, 1402, 1216, 1086, 1236, 1219, 1330, 1367, 1416, 1297, 1204];\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        formatter: tooltipFormatter,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: months,\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          color: utils.getGrays()['400'],\r\n          formatter: value => value.substring(0, 3),\r\n          margin: 15\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        boundaryGap: true,\r\n        axisLabel: {\r\n          show: true,\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        splitLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLine: { show: false },\r\n        min: 600\r\n      },\r\n      series: [\r\n        {\r\n          type: 'bar',\r\n          name: 'Total',\r\n          data,\r\n          lineStyle: { color: utils.getColor('primary') },\r\n          itemStyle: {\r\n            color: utils.getColor('primary'),\r\n            barBorderRadius: [3, 3, 0, 0]\r\n          },\r\n          showSymbol: false,\r\n          symbol: 'circle',\r\n          smooth: false,\r\n          hoverAnimation: true\r\n        }\r\n      ],\r\n      grid: { right: '3%', left: '10%', bottom: '10%', top: '5%' }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsBasicBarChartInit;\r\n","/* eslint-disable */\r\nimport utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Bar Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsBasicCandlestickChartInit = () => {\r\n  const $basicCandleStickChartEl = document.querySelector('.echart-candlestick-chart-example');\r\n\r\n  if ($basicCandleStickChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($basicCandleStickChartEl, 'options');\r\n    const chart = window.echarts.init($basicCandleStickChartEl);\r\n\r\n    const data = [\r\n      ['2013/1/24', 2320.26, 2320.26, 2287.3, 2362.94],\r\n      ['2013/1/25', 2300, 2291.3, 2288.26, 2308.38],\r\n      ['2013/1/28', 2295.35, 2346.5, 2295.35, 2346.92],\r\n      ['2013/1/29', 2347.22, 2358.98, 2337.35, 2363.8],\r\n      ['2013/1/30', 2360.75, 2382.48, 2347.89, 2383.76],\r\n      ['2013/1/31', 2383.43, 2385.42, 2371.23, 2391.82],\r\n      ['2013/2/1', 2377.41, 2419.02, 2369.57, 2421.15],\r\n      ['2013/2/4', 2425.92, 2428.15, 2417.58, 2440.38],\r\n      ['2013/2/5', 2411, 2433.13, 2403.3, 2437.42],\r\n      ['2013/2/6', 2432.68, 2434.48, 2427.7, 2441.73],\r\n      ['2013/2/7', 2430.69, 2418.53, 2394.22, 2433.89],\r\n      ['2013/2/8', 2416.62, 2432.4, 2414.4, 2443.03],\r\n      ['2013/2/18', 2441.91, 2421.56, 2415.43, 2444.8],\r\n      ['2013/2/19', 2420.26, 2382.91, 2373.53, 2427.07],\r\n      ['2013/2/20', 2383.49, 2397.18, 2370.61, 2397.94],\r\n      ['2013/2/21', 2378.82, 2325.95, 2309.17, 2378.82],\r\n      ['2013/2/22', 2322.94, 2314.16, 2308.76, 2330.88],\r\n      ['2013/2/25', 2320.62, 2325.82, 2315.01, 2338.78],\r\n      ['2013/2/26', 2313.74, 2293.34, 2289.89, 2340.71],\r\n      ['2013/2/27', 2297.77, 2313.22, 2292.03, 2324.63],\r\n      ['2013/2/28', 2322.32, 2365.59, 2308.92, 2366.16],\r\n      ['2013/3/1', 2364.54, 2359.51, 2330.86, 2369.65],\r\n      ['2013/3/4', 2332.08, 2273.4, 2259.25, 2333.54],\r\n      ['2013/3/5', 2274.81, 2326.31, 2270.1, 2328.14],\r\n      ['2013/3/6', 2333.61, 2347.18, 2321.6, 2351.44],\r\n      ['2013/3/7', 2340.44, 2324.29, 2304.27, 2352.02],\r\n      ['2013/3/8', 2326.42, 2318.61, 2314.59, 2333.67],\r\n      ['2013/3/11', 2314.68, 2310.59, 2296.58, 2320.96],\r\n      ['2013/3/12', 2309.16, 2286.6, 2264.83, 2333.29],\r\n      ['2013/3/13', 2282.17, 2263.97, 2253.25, 2286.33],\r\n      ['2013/3/14', 2255.77, 2270.28, 2253.31, 2276.22],\r\n      ['2013/3/15', 2269.31, 2278.4, 2250, 2312.08],\r\n      ['2013/3/18', 2267.29, 2240.02, 2239.21, 2276.05],\r\n      ['2013/3/19', 2244.26, 2257.43, 2232.02, 2261.31],\r\n      ['2013/3/20', 2257.74, 2317.37, 2257.42, 2317.86],\r\n      ['2013/3/21', 2318.21, 2324.24, 2311.6, 2330.81],\r\n      ['2013/3/22', 2321.4, 2328.28, 2314.97, 2332],\r\n      ['2013/3/25', 2334.74, 2326.72, 2319.91, 2344.89],\r\n      ['2013/3/26', 2318.58, 2297.67, 2281.12, 2319.99],\r\n      ['2013/3/27', 2299.38, 2301.26, 2289, 2323.48],\r\n      ['2013/3/28', 2273.55, 2236.3, 2232.91, 2273.55],\r\n      ['2013/3/29', 2238.49, 2236.62, 2228.81, 2246.87],\r\n      ['2013/4/1', 2229.46, 2234.4, 2227.31, 2243.95],\r\n      ['2013/4/2', 2234.9, 2227.74, 2220.44, 2253.42],\r\n      ['2013/4/3', 2232.69, 2225.29, 2217.25, 2241.34],\r\n      ['2013/4/8', 2196.24, 2211.59, 2180.67, 2212.59],\r\n      ['2013/4/9', 2215.47, 2225.77, 2215.47, 2234.73],\r\n      ['2013/4/10', 2224.93, 2226.13, 2212.56, 2233.04],\r\n      ['2013/4/11', 2236.98, 2219.55, 2217.26, 2242.48],\r\n      ['2013/4/12', 2218.09, 2206.78, 2204.44, 2226.26]\r\n    ];\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n      toolbox: {\r\n        top: 0,\r\n        feature: {\r\n          dataZoom: {\r\n            yAxisIndex: false\r\n          },\r\n          restore: { show: true }\r\n        },\r\n        iconStyle: {\r\n          borderColor: utils.getGrays()['700'],\r\n          borderWidth: 1\r\n        },\r\n\r\n        emphasis: {\r\n          iconStyle: {\r\n            textFill: utils.getGrays()['600']\r\n          }\r\n        }\r\n      },\r\n      dataZoom: [\r\n        {\r\n          type: 'inside',\r\n          start: 0,\r\n          end: 100,\r\n          minValueSpan: 10\r\n        }\r\n      ],\r\n      xAxis: {\r\n        type: 'category',\r\n        data: data.map(item => item[0]),\r\n        scale: true,\r\n        splitLine: { show: false },\r\n        splitNumber: 10,\r\n        min: 'dataMin',\r\n        max: 'dataMax',\r\n        boundaryGap: true,\r\n        axisPointer: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'dashed'\r\n          }\r\n        },\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          color: utils.getGrays()['600'],\r\n          formatter: value => window.dayjs(value, 'YYYY-MM-DD').format('MMM DD'),\r\n          margin: 15,\r\n          fontWeight: 500\r\n        }\r\n      },\r\n      yAxis: {\r\n        scale: true,\r\n        axisPointer: { show: false },\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['200'],\r\n            type: 'dashed'\r\n          }\r\n        },\r\n        boundaryGap: false,\r\n        axisLabel: {\r\n          show: true,\r\n          color: utils.getGrays()['600'],\r\n          margin: 15,\r\n          fontWeight: 500\r\n        },\r\n        axisTick: { show: false },\r\n        axisLine: { show: false }\r\n      },\r\n      series: [\r\n        {\r\n          type: 'candlestick',\r\n          name: 'Volume',\r\n          data: data.map(item => item.slice(1)),\r\n          itemStyle: {\r\n            color: utils.getColor('warning'),\r\n            color0: utils.getColor('primary'),\r\n            borderColor: utils.getColor('warning'),\r\n            borderColor0: utils.getColor('primary')\r\n          }\r\n        }\r\n      ],\r\n      grid: {\r\n        right: 5,\r\n        left: 5,\r\n        bottom: 5,\r\n        top: '15%',\r\n        containLabel: true\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsBasicCandlestickChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Basic Gauge Chart                      */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsBasicGaugeChartInit = () => {\r\n  const $basicGaugeChartEl = document.querySelector('.echart-basic-gauge-chart-example');\r\n\r\n  if ($basicGaugeChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($basicGaugeChartEl, 'options');\r\n    const chart = window.echarts.init($basicGaugeChartEl);\r\n\r\n    const tooltipFormatter = params => {\r\n      return `\r\n      <div>\r\n          <h6 class=\"fs--1 text-700 mb-0\">\r\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\r\n            ${params[0].name} : ${params[0].value}\r\n          </h6>\r\n      </div>\r\n      `;\r\n    };\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        formatter: tooltipFormatter,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n      radius: '100%',\r\n      series: [\r\n        {\r\n          name: 'Pressure',\r\n          type: 'gauge',\r\n          splitLine: {\r\n            lineStyle: {\r\n              color: utils.getGrays()['600']\r\n            }\r\n          },\r\n          axisLabel: {\r\n            color: utils.getGrays()['600']\r\n          },\r\n          detail: {\r\n            formatter: '{value}'\r\n          },\r\n          title: {\r\n            color: utils.getGrays()['600']\r\n          },\r\n          data: [\r\n            {\r\n              value: 50,\r\n              name: 'SCORE',\r\n              detail: {\r\n                color: utils.getGrays()['600']\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsBasicGaugeChartInit;\r\n","import utils from '../../../utils';\r\nimport { getPosition, echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Line Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsLineChartInit = () => {\r\n  const $lineChartEl = document.querySelector('.echart-line-chart-example');\r\n\r\n  if ($lineChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($lineChartEl, 'options');\r\n    const chart = window.echarts.init($lineChartEl);\r\n\r\n    const months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December'\r\n    ];\r\n\r\n    const data = [1272, 1301, 1402, 1216, 1086, 1236, 1219, 1330, 1367, 1416, 1297, 1204];\r\n\r\n    const tooltipFormatter = params => {\r\n      return `\r\n      <div>\r\n          <h6 class=\"fs--1 text-700 mb-0\">\r\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].borderColor}'></span>\r\n            ${params[0].name} : ${params[0].value}\r\n          </h6>\r\n      </div>\r\n      `;\r\n    };\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        formatter: tooltipFormatter,\r\n        transitionDuration: 0,\r\n        position(pos, params, dom, rect, size) {\r\n          return getPosition(pos, params, dom, rect, size);\r\n        },\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: months,\r\n        boundaryGap: false,\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          color: utils.getGrays()['400'],\r\n          formatter: value => value.substring(0, 3),\r\n          margin: 15\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        splitLine: {\r\n          lineStyle: {\r\n            type: 'dashed',\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        boundaryGap: false,\r\n        axisLabel: {\r\n          show: true,\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        axisTick: { show: false },\r\n        axisLine: { show: false },\r\n        min: 600\r\n      },\r\n      series: [\r\n        {\r\n          type: 'line',\r\n          data,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('primary'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('primary')\r\n          },\r\n          showSymbol: false,\r\n          symbol: 'circle',\r\n          symbolSize: 10,\r\n          smooth: false,\r\n          hoverAnimation: true\r\n        }\r\n      ],\r\n      grid: { right: '3%', left: '10%', bottom: '10%', top: '5%' }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsLineChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                           Echarts Bubble Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsBubbleChartInit = () => {\r\n  const $bubbleChartEl = document.querySelector('.echart-bubble-chart-example');\r\n\r\n  if ($bubbleChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($bubbleChartEl, 'options');\r\n    const chart = window.echarts.init($bubbleChartEl);\r\n\r\n    let data = [\r\n      [\r\n        [28604, 77, 17096869, 'Australia', 1990],\r\n        [31163, 77.4, 27662440, 'Canada', 1990],\r\n        [1516, 68, 1154605773, 'China', 1990],\r\n        [28599, 75, 4986705, 'Finland', 1990],\r\n        [29476, 77.1, 56943299, 'France', 1990],\r\n        [31476, 75.4, 78958237, 'Germany', 1990],\r\n        [1777, 57.7, 870601776, 'India', 1990],\r\n        [29550, 79.1, 122249285, 'Japan', 1990],\r\n        [12087, 72, 42972254, 'South Korea', 1990],\r\n        [24021, 75.4, 3397534, 'New Zealand', 1990],\r\n        [43296, 76.8, 4240375, 'Norway', 1990],\r\n        [10088, 70.8, 38195258, 'Poland', 1990],\r\n        [19349, 69.6, 147568552, 'Russia', 1990],\r\n        [26424, 75.7, 57110117, 'United Kingdom', 1990],\r\n        [37062, 75.4, 252847810, 'United States', 1990]\r\n      ],\r\n      [\r\n        [44056, 81.8, 23968973, 'Australia', 2015],\r\n        [43294, 81.7, 35939927, 'Canada', 2015],\r\n        [13334, 76.9, 1376048943, 'China', 2015],\r\n        [38923, 80.8, 5503457, 'Finland', 2015],\r\n        [37599, 81.9, 64395345, 'France', 2015],\r\n        [44053, 81.1, 80688545, 'Germany', 2015],\r\n        [5903, 66.8, 1311050527, 'India', 2015],\r\n        [36162, 83.5, 126573481, 'Japan', 2015],\r\n        [34644, 80.7, 50293439, 'South Korea', 2015],\r\n        [34186, 80.6, 4528526, 'New Zealand', 2015],\r\n        [64304, 81.6, 5210967, 'Norway', 2015],\r\n        [24787, 77.3, 38611794, 'Poland', 2015],\r\n        [23038, 73.13, 143456918, 'Russia', 2015],\r\n        [38225, 81.4, 64715810, 'United Kingdom', 2015],\r\n        [53354, 79.1, 321773631, 'United States', 2015]\r\n      ]\r\n    ];\r\n\r\n    const getDefaultOptions = () => ({\r\n      title: {\r\n        text: '1990 and 2015 have per capita and GDP',\r\n        left: 0,\r\n        top: 0,\r\n        textStyle: {\r\n          color: utils.getGrays()['600'],\r\n          fontWeight: 600\r\n        }\r\n      },\r\n      legend: {\r\n        right: 0,\r\n        top: '10%',\r\n        data: ['1990', '2015'],\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        }\r\n      },\r\n      xAxis: {\r\n        axisLabel: {\r\n          color: utils.getGrays()['600'],\r\n          formatter: value => `${value / 1000}k`\r\n        },\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        },\r\n\r\n        splitLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        scale: true,\r\n        axisLabel: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n        splitLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          name: '1990',\r\n          data: data[0],\r\n          type: 'scatter',\r\n          symbolSize: function (value) {\r\n            return Math.sqrt(value[2]) / 5e2;\r\n          },\r\n          emphasis: {\r\n            focus: 'series',\r\n            label: {\r\n              color: utils.getGrays()['600'],\r\n              show: true,\r\n              formatter: function (param) {\r\n                return param.data[3];\r\n              },\r\n              position: 'top'\r\n            }\r\n          },\r\n          itemStyle: {\r\n            color: utils.rgbaColor(utils.getColor('primary'), 0.7)\r\n          }\r\n        },\r\n        {\r\n          name: '2015',\r\n          data: data[1],\r\n          type: 'scatter',\r\n          symbolSize: function (value) {\r\n            return Math.sqrt(value[2]) / 7e2;\r\n          },\r\n          emphasis: {\r\n            focus: 'series',\r\n            label: {\r\n              color: utils.getGrays()['600'],\r\n              show: true,\r\n              formatter: function (param) {\r\n                return param.data[3];\r\n              },\r\n              position: 'top'\r\n            }\r\n          },\r\n          itemStyle: {\r\n            color: utils.rgbaColor(utils.getColor('warning'), 0.7)\r\n          }\r\n        }\r\n      ],\r\n      grid: {\r\n        left: 5,\r\n        right: 10,\r\n        bottom: 5,\r\n        top: '20%',\r\n        containLabel: true\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsBubbleChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Bar Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsCandlestickMixedChartInit = () => {\r\n  const $candleStickMixedChartEl = document.querySelector(\r\n    '.echart-candlestick-mixed-chart-example'\r\n  );\r\n\r\n  if ($candleStickMixedChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($candleStickMixedChartEl, 'options');\r\n    const chart = window.echarts.init($candleStickMixedChartEl);\r\n\r\n    var colorList = [\r\n      utils.getColor('primary'),\r\n      utils.getColor('info'),\r\n      utils.getColor('dark'),\r\n      utils.getColor('warning')\r\n    ];\r\n\r\n    /* eslint-disable no-continue */\r\n    const calculateMA = (dayCount, data) => {\r\n      var result = [];\r\n      for (var i = 0, len = data.length; i < len; i += 1) {\r\n        if (i < dayCount) {\r\n          result.push('-');\r\n          continue;\r\n        }\r\n        var sum = 0;\r\n        for (var j = 0; j < dayCount; j += 1) {\r\n          sum += data[i - j][1];\r\n        }\r\n        result.push((sum / dayCount).toFixed(2));\r\n      }\r\n      return result;\r\n    };\r\n\r\n    const dates = utils.getPastDates(61).map(date => window.dayjs(date).format('MMM DD, YYYY'));\r\n\r\n    const data = [\r\n      [17512.58, 17633.11, 17434.27, 17642.81, 86160000],\r\n      [17652.36, 17716.66, 17652.36, 17790.11, 79330000],\r\n      [17716.05, 17685.09, 17669.72, 17755.7, 102600000],\r\n      [17661.74, 17792.75, 17568.02, 17811.48, 104890000],\r\n      [17799.39, 17737, 17710.67, 17806.38, 85230000],\r\n      [17718.03, 17603.32, 17579.56, 17718.03, 115230000],\r\n      [17605.45, 17716.05, 17542.54, 17723.55, 99410000],\r\n      [17687.28, 17541.96, 17484.23, 17687.28, 90120000],\r\n      [17555.39, 17576.96, 17528.16, 17694.51, 79990000],\r\n      [17586.48, 17556.41, 17555.9, 17731.63, 107100000],\r\n      [17571.34, 17721.25, 17553.57, 17744.43, 81020000],\r\n      [17741.66, 17908.28, 17741.66, 17918.35, 91710000],\r\n      [17912.25, 17926.43, 17885.44, 17962.14, 84510000],\r\n      [17925.95, 17897.46, 17867.41, 17937.65, 118160000],\r\n      [17890.2, 18004.16, 17848.22, 18009.53, 89390000],\r\n      [18012.1, 18053.6, 17984.43, 18103.46, 89820000],\r\n      [18059.49, 18096.27, 18031.21, 18167.63, 100210000],\r\n      [18092.84, 17982.52, 17963.89, 18107.29, 102720000],\r\n      [17985.05, 18003.75, 17909.89, 18026.85, 134120000],\r\n      [17990.94, 17977.24, 17855.55, 17990.94, 83770000],\r\n      [17987.38, 17990.32, 17934.17, 18043.77, 92570000],\r\n      [17996.14, 18041.55, 17920.26, 18084.66, 109090000],\r\n      [18023.88, 17830.76, 17796.55, 18035.73, 100920000],\r\n      [17813.09, 17773.64, 17651.98, 17814.83, 136670000],\r\n      [17783.78, 17891.16, 17773.71, 17912.35, 80100000],\r\n      [17870.75, 17750.91, 17670.88, 17870.75, 97060000],\r\n      [17735.02, 17651.26, 17609.01, 17738.06, 95020000],\r\n      [17664.48, 17660.71, 17615.82, 17736.11, 81530000],\r\n      [17650.3, 17740.63, 17580.38, 17744.54, 80020000],\r\n      [17743.85, 17705.91, 17668.38, 17783.16, 85590000],\r\n      [17726.66, 17928.35, 17726.66, 17934.61, 75790000],\r\n      [17919.03, 17711.12, 17711.05, 17919.03, 87390000],\r\n      [17711.12, 17720.5, 17625.38, 17798.19, 88560000],\r\n      [17711.12, 17535.32, 17512.48, 17734.74, 86640000],\r\n      [17531.76, 17710.71, 17531.76, 17755.8, 88440000],\r\n      [17701.46, 17529.98, 17469.92, 17701.46, 103260000],\r\n      [17501.28, 17526.62, 17418.21, 17636.22, 79120000],\r\n      [17514.16, 17435.4, 17331.07, 17514.16, 95530000],\r\n      [17437.32, 17500.94, 17437.32, 17571.75, 111990000],\r\n      [17507.04, 17492.93, 17480.05, 17550.7, 87790000],\r\n      [17525.19, 17706.05, 17525.19, 17742.59, 86480000],\r\n      [17735.09, 17851.51, 17735.09, 17891.71, 79180000],\r\n      [17859.52, 17828.29, 17803.82, 17888.66, 68940000],\r\n      [17826.85, 17873.22, 17824.73, 17873.22, 73190000],\r\n      [17891.5, 17787.2, 17724.03, 17899.24, 147390000],\r\n      [17754.55, 17789.67, 17664.79, 17809.18, 78530000],\r\n      [17789.05, 17838.56, 17703.55, 17838.56, 75560000],\r\n      [17799.8, 17807.06, 17689.68, 17833.17, 82270000],\r\n      [17825.69, 17920.33, 17822.81, 17949.68, 71870000],\r\n      [17936.22, 17938.28, 17936.22, 18003.23, 78750000],\r\n      [17931.91, 18005.05, 17931.91, 18016, 71260000],\r\n      [17969.98, 17985.19, 17915.88, 18005.22, 69690000],\r\n      [17938.82, 17865.34, 17812.34, 17938.82, 90540000],\r\n      [17830.5, 17732.48, 17731.35, 17893.28, 101690000],\r\n      [17710.77, 17674.82, 17595.79, 17733.92, 93740000],\r\n      [17703.65, 17640.17, 17629.01, 17762.96, 94130000],\r\n      [17602.23, 17733.1, 17471.29, 17754.91, 91950000],\r\n      [17733.44, 17675.16, 17602.78, 17733.44, 248680000],\r\n      [17736.87, 17804.87, 17736.87, 17946.36, 99380000],\r\n      [17827.33, 17829.73, 17799.8, 17877.84, 85130000],\r\n      [17832.67, 17780.83, 17770.36, 17920.16, 89440000]\r\n    ];\r\n\r\n    const dataMA5 = calculateMA(5, data);\r\n\r\n    const getDefaultOptions = () => ({\r\n      animation: false,\r\n      color: colorList,\r\n      legend: {\r\n        top: 0,\r\n        data: ['MA1', 'MA5', 'Volume'],\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        }\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        position: function (pos, params, el, elRect, size) {\r\n          var obj = {\r\n            top: 60\r\n          };\r\n          obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 5;\r\n          return obj;\r\n        }\r\n      },\r\n      axisPointer: {\r\n        link: [\r\n          {\r\n            xAxisIndex: [0, 1]\r\n          }\r\n        ]\r\n      },\r\n      dataZoom: [\r\n        {\r\n          type: 'slider',\r\n          xAxisIndex: [0, 1],\r\n          realtime: false,\r\n          start: 20,\r\n          end: 70,\r\n          top: 35,\r\n          height: 15,\r\n          handleIcon:\r\n            'path://M10.7,11.9H9.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',\r\n          handleSize: '120%'\r\n        },\r\n        {\r\n          type: 'inside',\r\n          xAxisIndex: [0, 1],\r\n          start: 40,\r\n          end: 70,\r\n          top: 30,\r\n          height: 20\r\n        }\r\n      ],\r\n      xAxis: [\r\n        {\r\n          type: 'category',\r\n          data: dates,\r\n          boundaryGap: false,\r\n          axisLine: {\r\n            lineStyle: { color: utils.getGrays()['300'] }\r\n          },\r\n          axisLabel: {\r\n            color: utils.getGrays()['600'],\r\n            formatter: value => window.dayjs(value).format('MMM DD')\r\n          },\r\n          min: 'dataMin',\r\n          max: 'dataMax',\r\n          axisPointer: {\r\n            show: true\r\n          }\r\n        },\r\n        {\r\n          type: 'category',\r\n          gridIndex: 1,\r\n          data: dates,\r\n          scale: true,\r\n          boundaryGap: false,\r\n          splitLine: { show: false },\r\n          axisLabel: { show: false },\r\n          axisTick: { show: false },\r\n          axisLine: { lineStyle: { color: 'blue' } },\r\n          splitNumber: 20,\r\n          min: 'dataMin',\r\n          max: 'dataMax',\r\n          axisPointer: {\r\n            type: 'shadow',\r\n            label: { show: false },\r\n            triggerTooltip: true\r\n          }\r\n        }\r\n      ],\r\n      yAxis: [\r\n        {\r\n          scale: true,\r\n          splitNumber: 2,\r\n          axisLine: { show: false },\r\n          splitLine: {\r\n            lineStyle: {\r\n              color: utils.getGrays()['200']\r\n            }\r\n          },\r\n          axisTick: { show: false },\r\n          axisLabel: {\r\n            color: utils.getGrays()['600']\r\n          }\r\n        },\r\n        {\r\n          scale: true,\r\n          gridIndex: 1,\r\n          splitNumber: 2,\r\n          axisLabel: { show: false },\r\n          axisLine: { show: false },\r\n          axisTick: { show: false },\r\n          splitLine: { show: false }\r\n        }\r\n      ],\r\n      grid: [\r\n        {\r\n          left: 5,\r\n          right: 12,\r\n          // top: 110,\r\n          bottom: 60,\r\n          height: 160,\r\n          containLabel: true\r\n        },\r\n        {\r\n          left: 50,\r\n          right: 12,\r\n          height: 40,\r\n          top: 260,\r\n          containLabel: true\r\n        }\r\n      ],\r\n      series: [\r\n        {\r\n          name: 'Volume',\r\n          type: 'bar',\r\n          xAxisIndex: 1,\r\n          yAxisIndex: 1,\r\n          itemStyle: {\r\n            color: utils.getColor('primary')\r\n          },\r\n          emphasis: {\r\n            itemStyle: {\r\n              color: utils.getColor('primary')\r\n            }\r\n          },\r\n          data: data.map(item => item[4])\r\n        },\r\n        {\r\n          type: 'candlestick',\r\n          name: 'MA1',\r\n          data: data,\r\n          itemStyle: {\r\n            color: utils.getColor('success'),\r\n            color0: utils.getColor('info'),\r\n            borderColor: utils.getColor('success'),\r\n            borderColor0: utils.getColor('info')\r\n          }\r\n        },\r\n        {\r\n          name: 'MA5',\r\n          type: 'line',\r\n          data: dataMA5,\r\n          smooth: true,\r\n          showSymbol: false,\r\n          lineStyle: {\r\n            width: 1,\r\n            color: utils.getColor('primary')\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsCandlestickMixedChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Doughnut Chart                         */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsDoughnutChartInit = () => {\r\n  const $doughnutChartEl = document.querySelector('.echart-doughnut-chart-example');\r\n\r\n  if ($doughnutChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($doughnutChartEl, 'options');\r\n    const chart = window.echarts.init($doughnutChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      legend: {\r\n        left: 'left',\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          type: 'pie',\r\n          radius: ['40%', '70%'],\r\n          center: ['50%', '55%'],\r\n          avoidLabelOverlap: false,\r\n          label: {\r\n            show: false,\r\n            position: 'center'\r\n          },\r\n          labelLine: {\r\n            show: false\r\n          },\r\n          data: [\r\n            {\r\n              value: 1048,\r\n              name: 'Facebook',\r\n              itemStyle: {\r\n                color: utils.getColor('primary')\r\n              }\r\n            },\r\n            {\r\n              value: 735,\r\n              name: 'Youtube',\r\n              itemStyle: {\r\n                color: utils.getColor('danger')\r\n              }\r\n            },\r\n            {\r\n              value: 580,\r\n              name: 'Twitter',\r\n              itemStyle: {\r\n                color: utils.getColor('info')\r\n              }\r\n            },\r\n            {\r\n              value: 484,\r\n              name: 'Linkedin',\r\n              itemStyle: {\r\n                color: utils.getColor('success')\r\n              }\r\n            },\r\n            {\r\n              value: 300,\r\n              name: 'Github',\r\n              itemStyle: {\r\n                color: utils.getColor('warning')\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      tooltip: {\r\n        trigger: 'item',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsDoughnutChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Doughnut Chart                         */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsDoughnutRoundedChartInit = () => {\r\n  const $doughnutRoundedChartEl = document.querySelector('.echart-doughnut-rounded-chart');\r\n\r\n  if ($doughnutRoundedChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($doughnutRoundedChartEl, 'options');\r\n    const chart = window.echarts.init($doughnutRoundedChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      legend: {\r\n        orient: 'vertical',\r\n        left: 'left',\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          type: 'pie',\r\n          radius: ['40%', '70%'],\r\n          center: window.innerWidth < 530 ? ['65%', '55%'] : ['50%', '55%'],\r\n          avoidLabelOverlap: false,\r\n          itemStyle: {\r\n            borderRadius: 10,\r\n            borderColor: utils.getGrays()['100'],\r\n            borderWidth: 2\r\n          },\r\n          label: {\r\n            show: false,\r\n            position: 'center'\r\n          },\r\n          labelLine: {\r\n            show: false\r\n          },\r\n          data: [\r\n            {\r\n              value: 1048,\r\n              name: 'Starter',\r\n              itemStyle: {\r\n                color: utils.getColor('primary')\r\n              }\r\n            },\r\n            {\r\n              value: 735,\r\n              name: 'Basic',\r\n              itemStyle: {\r\n                color: utils.getColor('danger')\r\n              }\r\n            },\r\n            {\r\n              value: 580,\r\n              name: 'Optimal',\r\n              itemStyle: {\r\n                color: utils.getColor('info')\r\n              }\r\n            },\r\n            {\r\n              value: 484,\r\n              name: 'Business',\r\n              itemStyle: {\r\n                color: utils.getColor('success')\r\n              }\r\n            },\r\n            {\r\n              value: 300,\r\n              name: 'Premium',\r\n              itemStyle: {\r\n                color: utils.getColor('warning')\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      tooltip: {\r\n        trigger: 'item',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n\r\n    utils.resize(() => {\r\n      if (window.innerWidth < 530) {\r\n        chart.setOption({\r\n          series: [\r\n            {\r\n              center: ['65%', '55%']\r\n            }\r\n          ]\r\n        });\r\n      } else\r\n        chart.setOption({\r\n          series: [\r\n            {\r\n              center: ['50%', '55%']\r\n            }\r\n          ]\r\n        });\r\n    });\r\n  }\r\n};\r\n\r\nexport default echartsDoughnutRoundedChartInit;\r\n","/* eslint-disable */\r\nimport utils from '../../../utils';\r\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                           Echarts Dynamic Line Chart                       */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsDynamicLineChartInit = () => {\r\n  const $dynamicLineChartEl = document.querySelector('.echart-dynamic-line-chart-example');\r\n\r\n  if ($dynamicLineChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($dynamicLineChartEl, 'options');\r\n    const chart = window.echarts.init($dynamicLineChartEl);\r\n\r\n    const randomData = () => {\r\n      now = new Date(+now + oneDay);\r\n      value = value + Math.random() * 21 - 10;\r\n      return {\r\n        name: now.toString(),\r\n        value: [[now.getFullYear(), now.getMonth() + 1, now.getDate()].join('/'), Math.round(value)]\r\n      };\r\n    };\r\n\r\n    var data = [];\r\n    var now = +new Date(1997, 9, 3);\r\n    var oneDay = 24 * 3600 * 1000;\r\n    var value = Math.random() * 1000;\r\n    for (var i = 0; i < 1000; i++) {\r\n      data.push(randomData());\r\n    }\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          animation: false\r\n        },\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        formatter: tooltipFormatter\r\n      },\r\n      xAxis: {\r\n        type: 'time',\r\n        splitLine: {\r\n          show: false\r\n        },\r\n        axisLabel: {\r\n          color: utils.getGrays()['500']\r\n        },\r\n\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        },\r\n        axisPointer: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        boundaryGap: [0, '100%'],\r\n        splitLine: {\r\n          show: false\r\n        },\r\n        axisLabel: {\r\n          color: utils.getGrays()['500']\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Total',\r\n          type: 'line',\r\n          showSymbol: false,\r\n          hoverAnimation: false,\r\n          data: data,\r\n          lineStyle: {\r\n            color: utils.getColor('primary')\r\n          },\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('primary'),\r\n            borderWidth: 2\r\n          },\r\n          symbol: 'circle',\r\n          symbolSize: 10\r\n        }\r\n      ],\r\n      grid: { right: 5, left: '7%', bottom: '10%', top: '5%' }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n\r\n    setInterval(function () {\r\n      for (var i = 0; i < 5; i++) {\r\n        data.shift();\r\n        data.push(randomData());\r\n      }\r\n\r\n      chart.setOption({\r\n        series: [\r\n          {\r\n            data: data\r\n          }\r\n        ]\r\n      });\r\n    }, 1000);\r\n  }\r\n};\r\n\r\nexport default echartsDynamicLineChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                          Echarts Gauge Progress Chart                      */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsGaugeGradeChartInit = () => {\r\n  const $gaugeGradeChartEl = document.querySelector('.echart-gauge-grade-chart-example');\r\n\r\n  if ($gaugeGradeChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($gaugeGradeChartEl, 'options');\r\n    const chart = window.echarts.init($gaugeGradeChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      series: [\r\n        {\r\n          radius: '100%',\r\n          type: 'gauge',\r\n          center: ['50%', '70%'],\r\n          startAngle: 180,\r\n          endAngle: 0,\r\n          min: 0,\r\n          max: 1,\r\n          splitNumber: 8,\r\n          axisLine: {\r\n            lineStyle: {\r\n              width: 6,\r\n              color: [\r\n                [0.25, utils.getColor('danger')],\r\n                [0.5, utils.getColor('warning')],\r\n                [0.75, utils.getColor('info')],\r\n                [1, utils.getColor('success')]\r\n              ]\r\n            }\r\n          },\r\n          pointer: {\r\n            icon: 'path://M12.8,0.7l12,40.1H0.7L12.8,0.7z',\r\n            length: '12%',\r\n            width: 20,\r\n            offsetCenter: [0, '-60%'],\r\n            itemStyle: {\r\n              color: 'auto'\r\n            }\r\n          },\r\n          axisTick: {\r\n            length: 12,\r\n            lineStyle: {\r\n              color: 'auto',\r\n              width: 2\r\n            }\r\n          },\r\n          splitLine: {\r\n            length: 20,\r\n            lineStyle: {\r\n              color: 'auto',\r\n              width: 5\r\n            }\r\n          },\r\n          axisLabel: {\r\n            color: utils.getGrays()['600'],\r\n            distance: -60,\r\n            formatter: function (value) {\r\n              if (value === 0.875) {\r\n                return 'Excellent';\r\n              } else if (value === 0.625) {\r\n                return 'Good';\r\n              } else if (value === 0.375) {\r\n                return 'Well';\r\n              } else if (value === 0.125) {\r\n                return 'Bad';\r\n              }\r\n              return '';\r\n            }\r\n          },\r\n          title: {\r\n            offsetCenter: [0, '-20%'],\r\n            color: utils.getGrays()['600']\r\n          },\r\n          detail: {\r\n            offsetCenter: [0, '0%'],\r\n            valueAnimation: true,\r\n            formatter: function (value) {\r\n              return Math.round(value * 100);\r\n            },\r\n            color: 'auto'\r\n          },\r\n          data: [\r\n            {\r\n              value: 0.7,\r\n              name: 'Grade'\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsGaugeGradeChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                          Echarts Gauge Progress Chart                      */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsGaugeMultiRingChartInit = () => {\r\n  const $gaugeMultiRingChartEl = document.querySelector('.echart-gauge-multi-ring-chart-example');\r\n\r\n  if ($gaugeMultiRingChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($gaugeMultiRingChartEl, 'options');\r\n    const chart = window.echarts.init($gaugeMultiRingChartEl);\r\n\r\n    const tooltipFormatter = params => {\r\n      return `\r\n      <div>\r\n          <h6 class=\"fs--1 text-700 mb-0\">\r\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\r\n            ${params[0].name} : ${params[0].value}\r\n          </h6>\r\n      </div>\r\n      `;\r\n    };\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        formatter: tooltipFormatter,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          type: 'gauge',\r\n          radius: '100%',\r\n          startAngle: 90,\r\n          endAngle: -270,\r\n          pointer: {\r\n            show: false\r\n          },\r\n          progress: {\r\n            show: true,\r\n            overlap: false,\r\n            roundCap: true,\r\n            clip: false,\r\n            itemStyle: {\r\n              borderWidth: 1,\r\n              borderColor: utils.getGrays()['500']\r\n            }\r\n          },\r\n          axisLine: {\r\n            lineStyle: {\r\n              width: 40\r\n            }\r\n          },\r\n          splitLine: {\r\n            show: false,\r\n            distance: 0,\r\n            length: 10\r\n          },\r\n          axisTick: {\r\n            show: false\r\n          },\r\n          axisLabel: {\r\n            show: false,\r\n            distance: 50\r\n          },\r\n          data: [\r\n            {\r\n              value: 60,\r\n              name: 'Perfect',\r\n              title: {\r\n                offsetCenter: ['0%', '-50%']\r\n              },\r\n              detail: {\r\n                offsetCenter: ['0%', '-35%']\r\n              },\r\n              itemStyle: {\r\n                color: utils.getColor('primary')\r\n              }\r\n            },\r\n            {\r\n              value: 40,\r\n              name: 'Good',\r\n              title: {\r\n                offsetCenter: ['0%', '-10%']\r\n              },\r\n              detail: {\r\n                offsetCenter: ['0%', '5%']\r\n              },\r\n              itemStyle: {\r\n                color: utils.getColor('success')\r\n              }\r\n            },\r\n            {\r\n              value: 20,\r\n              name: 'Commonly',\r\n              title: {\r\n                offsetCenter: ['0%', '30%']\r\n              },\r\n              detail: {\r\n                offsetCenter: ['0%', '45%']\r\n              },\r\n              itemStyle: {\r\n                color: utils.getColor('warning')\r\n              }\r\n            }\r\n          ],\r\n          title: {\r\n            fontSize: 14,\r\n            color: utils.getGrays()['600']\r\n          },\r\n          detail: {\r\n            width: 50,\r\n            height: 14,\r\n            fontSize: 14,\r\n            color: 'auto',\r\n            borderColor: 'auto',\r\n            borderRadius: 20,\r\n            borderWidth: 1,\r\n            formatter: '{value}%'\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsGaugeMultiRingChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                          Echarts Gauge Progress Chart                      */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsGaugeMultiTitleChartInit = () => {\r\n  const $gaugeMultiTitleChartEl = document.querySelector('.echart-gauge-multi-title-chart-example');\r\n\r\n  if ($gaugeMultiTitleChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($gaugeMultiTitleChartEl, 'options');\r\n    const chart = window.echarts.init($gaugeMultiTitleChartEl);\r\n\r\n    const tooltipFormatter = params => {\r\n      return `\r\n      <div>\r\n          <h6 class=\"fs--1 text-700 mb-0\">\r\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\r\n            ${params[0].name} : ${params[0].value}\r\n          </h6>\r\n      </div>\r\n      `;\r\n    };\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        formatter: tooltipFormatter,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          type: 'gauge',\r\n          radius: '100%',\r\n          anchor: {\r\n            show: true,\r\n            showAbove: true,\r\n            size: 18,\r\n            itemStyle: {\r\n              color: utils.getColor('warning')\r\n            }\r\n          },\r\n\r\n          progress: {\r\n            show: true,\r\n            overlap: true,\r\n            roundCap: true\r\n          },\r\n          axisLine: {\r\n            roundCap: true\r\n          },\r\n          axisTick: {\r\n            show: false\r\n          },\r\n          splitLine: {\r\n            lineStyle: {\r\n              width: 2,\r\n              color: utils.getGrays()['600']\r\n            }\r\n          },\r\n          axisLabel: {\r\n            distance: 25,\r\n            color: utils.getGrays()['600']\r\n          },\r\n          data: [\r\n            {\r\n              value: 20,\r\n              name: 'Perfect',\r\n              title: {\r\n                offsetCenter: ['-40%', '80%']\r\n              },\r\n              detail: {\r\n                offsetCenter: ['-40%', '95%']\r\n              },\r\n              itemStyle: {\r\n                color: utils.getColor('primary')\r\n              }\r\n            },\r\n            {\r\n              value: 40,\r\n              name: 'Good',\r\n              title: {\r\n                offsetCenter: ['0%', '80%']\r\n              },\r\n              detail: {\r\n                offsetCenter: ['0%', '95%']\r\n              },\r\n\r\n              itemStyle: {\r\n                color: utils.getColor('success')\r\n              }\r\n            },\r\n            {\r\n              value: 60,\r\n              name: 'Commonly',\r\n              title: {\r\n                offsetCenter: ['40%', '80%']\r\n              },\r\n              detail: {\r\n                offsetCenter: ['40%', '95%']\r\n              },\r\n\r\n              itemStyle: {\r\n                color: utils.getColor('warning')\r\n              }\r\n            }\r\n          ],\r\n          title: {\r\n            fontSize: 14,\r\n            color: utils.getGrays()['600']\r\n          },\r\n          detail: {\r\n            width: 40,\r\n            height: 14,\r\n            fontSize: 14,\r\n            color: '#fff',\r\n            backgroundColor: 'auto',\r\n            borderRadius: 3,\r\n            formatter: '{value}%'\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsGaugeMultiTitleChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                          Echarts Gauge Progress Chart                      */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsGaugeProgressChartInit = () => {\r\n  const $gaugeProgressChartEl = document.querySelector('.echart-gauge-progress-chart-example');\r\n\r\n  if ($gaugeProgressChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($gaugeProgressChartEl, 'options');\r\n    const chart = window.echarts.init($gaugeProgressChartEl);\r\n\r\n    const tooltipFormatter = params => {\r\n      return `\r\n      <div>\r\n          <h6 class=\"fs--1 text-700 mb-0\">\r\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\r\n            ${params[0].name} : ${params[0].value}\r\n          </h6>\r\n      </div>\r\n      `;\r\n    };\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        formatter: tooltipFormatter,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          type: 'gauge',\r\n          center: ['50%', '60%'],\r\n          radius: '100%',\r\n          startAngle: 180,\r\n          endAngle: 0,\r\n          progress: {\r\n            show: true,\r\n            width: 18,\r\n            itemStyle: {\r\n              color: utils.getColor('info')\r\n            }\r\n          },\r\n          itemStyle: {\r\n            color: utils.getColor('info'),\r\n            shadowColor: utils.rgbaColor(utils.getColor('primary'), 0.5),\r\n            shadowBlur: 10,\r\n            shadowOffsetX: 2,\r\n            shadowOffsetY: 2\r\n          },\r\n          axisLine: {\r\n            lineStyle: {\r\n              width: 18\r\n            }\r\n          },\r\n          axisTick: {\r\n            show: false\r\n          },\r\n          splitLine: {\r\n            lineStyle: {\r\n              width: 2,\r\n              color: utils.getGrays()['600']\r\n            }\r\n          },\r\n          axisLabel: {\r\n            distance: 25,\r\n            color: utils.getGrays()['600']\r\n          },\r\n          anchor: {\r\n            show: true,\r\n            showAbove: true,\r\n            size: 25,\r\n            itemStyle: {\r\n              color: utils.getColor('info')\r\n            }\r\n          },\r\n          title: {\r\n            show: false\r\n          },\r\n          detail: {\r\n            valueAnimation: true,\r\n            fontSize: 80,\r\n            offsetCenter: [0, '70%']\r\n          },\r\n          data: [\r\n            {\r\n              value: 70,\r\n              detail: {\r\n                fontSize: 30,\r\n                color: utils.getGrays()['600'],\r\n                offsetCenter: [0, '40%']\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsGaugeProgressChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                          Echarts Gauge Progress Chart                      */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsGaugeRingChartInit = () => {\r\n  const $gaugeRingChartEl = document.querySelector('.echart-gauge-ring-chart-example');\r\n\r\n  if ($gaugeRingChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($gaugeRingChartEl, 'options');\r\n    const chart = window.echarts.init($gaugeRingChartEl);\r\n\r\n    const tooltipFormatter = params => {\r\n      return `\r\n      <div>\r\n          <h6 class=\"fs--1 text-700 mb-0\">\r\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\r\n            ${params[0].name} : ${params[0].value}\r\n          </h6>\r\n      </div>\r\n      `;\r\n    };\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        formatter: tooltipFormatter,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          type: 'gauge',\r\n          radius: '100%',\r\n          startAngle: 90,\r\n          endAngle: -270,\r\n          pointer: {\r\n            show: false\r\n          },\r\n          progress: {\r\n            show: true,\r\n            overlap: false,\r\n            roundCap: true,\r\n            clip: false,\r\n            itemStyle: {\r\n              borderWidth: 1,\r\n              borderColor: utils.getGrays()['500']\r\n            }\r\n          },\r\n          axisLine: {\r\n            lineStyle: {\r\n              width: 18\r\n            }\r\n          },\r\n          splitLine: {\r\n            show: false,\r\n            distance: 0,\r\n            length: 10\r\n          },\r\n          axisTick: {\r\n            show: false\r\n          },\r\n          axisLabel: {\r\n            show: false,\r\n            distance: 50\r\n          },\r\n          data: [\r\n            {\r\n              value: 80,\r\n              title: {\r\n                offsetCenter: ['0%', '0%']\r\n              },\r\n              detail: {\r\n                offsetCenter: ['0%', '0%']\r\n              },\r\n              itemStyle: {\r\n                color: utils.getColor('primary')\r\n              }\r\n            }\r\n          ],\r\n          title: {\r\n            fontSize: 14\r\n          },\r\n          detail: {\r\n            width: 50,\r\n            height: 14,\r\n            fontSize: 20,\r\n            color: 'auto',\r\n            formatter: '{value}%'\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsGaugeRingChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                       Echarts Gradient Bar Chart                           */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsGradientBarChartInit = () => {\r\n  const $gradientBarChartEl = document.querySelector('.echart-gradient-bar-chart-example');\r\n\r\n  if ($gradientBarChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($gradientBarChartEl, 'options');\r\n    const chart = window.echarts.init($gradientBarChartEl);\r\n\r\n    var dataAxis = [\r\n      'A',\r\n      'B',\r\n      'C',\r\n      'D',\r\n      'E',\r\n      'F',\r\n      'G',\r\n      'H',\r\n      'I',\r\n      'J',\r\n      'K',\r\n      'L',\r\n      'M',\r\n      'N',\r\n      'O',\r\n      'P',\r\n      'Q',\r\n      'R',\r\n      'S',\r\n      'T'\r\n    ];\r\n    var data = [\r\n      220, 182, 191, 234, 290, 330, 310, 123, 442, 321, 90, 149, 210, 122, 133, 334, 198, 123, 125,\r\n      220\r\n    ];\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        },\r\n        formatter: tooltipFormatter\r\n      },\r\n      title: {\r\n        text: 'Gradient and Clickable bar chart',\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n        left: 'center'\r\n      },\r\n      xAxis: {\r\n        data: dataAxis,\r\n        axisLabel: {\r\n          inside: true,\r\n          textStyle: {\r\n            color: '#fff'\r\n          }\r\n        },\r\n        axisTick: {\r\n          show: false\r\n        },\r\n        axisLine: {\r\n          show: false\r\n        },\r\n        z: 10\r\n      },\r\n      yAxis: {\r\n        axisLine: {\r\n          show: false\r\n        },\r\n        axisTick: {\r\n          show: false\r\n        },\r\n        axisLabel: {\r\n          textStyle: {\r\n            color: utils.getGrays()['600']\r\n          }\r\n        },\r\n        splitLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getColor()['300']\r\n          }\r\n        }\r\n      },\r\n      dataZoom: [\r\n        {\r\n          type: 'inside'\r\n        }\r\n      ],\r\n      series: [\r\n        {\r\n          type: 'bar',\r\n          name: 'Total',\r\n          showBackground: true,\r\n          itemStyle: {\r\n            color: new window.echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n              { offset: 0, color: utils.getColor('info') },\r\n              { offset: 0.5, color: utils.getColor('primary') },\r\n              { offset: 1, color: utils.getColor('primary') }\r\n            ]),\r\n            barBorderRadius: [3, 3, 0, 0]\r\n          },\r\n          emphasis: {\r\n            itemStyle: {\r\n              color: new window.echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                { offset: 0, color: utils.getColor('primary') },\r\n                { offset: 0.7, color: utils.getColor('primary') },\r\n                { offset: 1, color: utils.getColor('info') }\r\n              ])\r\n            }\r\n          },\r\n          data: data\r\n        }\r\n      ],\r\n      grid: {\r\n        right: 5,\r\n        left: 5,\r\n        bottom: 5,\r\n        top: '10%',\r\n        containLabel: true\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n\r\n    const zoomSize = 6;\r\n    chart.on('click', function (params) {\r\n      chart.dispatchAction({\r\n        type: 'dataZoom',\r\n        startValue: dataAxis[Math.max(params.dataIndex - zoomSize / 2, 0)],\r\n        endValue: dataAxis[Math.min(params.dataIndex + zoomSize / 2, data.length - 1)]\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nexport default echartsGradientBarChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                Market Share                                */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsHeatMapChartInit = () => {\r\n  const ECHART_HEATMAP_CHART = '.echart-heatmap-chart-example';\r\n  const $echartHeatmapChart = document.querySelector(ECHART_HEATMAP_CHART);\r\n  const hours = ['12a', '2a', '4a', '6a', '8a', '10a', '12p', '2p', '4p', '6p', '8p', '10p'];\r\n  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\n  const data = [];\r\n  for (let i = 0; i < 7; i += 1) {\r\n    for (let j = 0; j < 12; j += 1) {\r\n      data.push([j, i, utils.getRandomNumber(5, 12)]);\r\n    }\r\n  }\r\n\r\n  if ($echartHeatmapChart) {\r\n    const userOptions = utils.getData($echartHeatmapChart, 'options');\r\n    const chart = window.echarts.init($echartHeatmapChart);\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        position: 'top',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1\r\n      },\r\n      grid: {\r\n        right: 5,\r\n        left: 5,\r\n        top: 5,\r\n        bottom: '15%',\r\n        containLabel: true\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: hours,\r\n        splitArea: {\r\n          show: true\r\n        },\r\n        axisLabel: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['400']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'category',\r\n        data: days,\r\n        axisLabel: {\r\n          formatter: value => value.substring(0, 3),\r\n          color: utils.getGrays()['600']\r\n        },\r\n        splitArea: {\r\n          show: true\r\n        },\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['400']\r\n          }\r\n        }\r\n      },\r\n      visualMap: {\r\n        min: 0,\r\n        max: 10,\r\n        calculable: true,\r\n        orient: 'horizontal',\r\n        left: 'center',\r\n        bottom: '0%',\r\n        textStyle: {\r\n          color: utils.getGrays()['600'],\r\n          fontWeight: 500\r\n        },\r\n        inRange: {\r\n          color: [\r\n            utils.rgbaColor(utils.getColors()['primary'], 1),\r\n            utils.rgbaColor(utils.getColors()['info'], 1),\r\n            utils.rgbaColor(utils.getColors()['success'], 1)\r\n            // utils.rgbaColor(utils.getColors()['warning'], 1),\r\n            // utils.rgbaColor(utils.getColors()['danger'], 1)\r\n          ]\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          type: 'heatmap',\r\n          data: data,\r\n          label: {\r\n            show: true\r\n          },\r\n          emphasis: {\r\n            itemStyle: {\r\n              shadowBlur: 10,\r\n              shadowColor: utils.rgbaColor(utils.getColors()['black'], 0.5)\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsHeatMapChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                Market Share                                */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsHeatMapSingleSeriesChartInit = () => {\r\n  const ECHART_HEATMAP_CHART = '.echart-heatmap-single-series-chart';\r\n  const $echartHeatmapChart = document.querySelector(ECHART_HEATMAP_CHART);\r\n  const hours = ['12a', '2a', '4a', '6a', '8a', '10a', '12p', '2p', '4p', '6p', '8p', '10p'];\r\n  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\n  const data = [];\r\n  for (let i = 0; i < 7; i += 1) {\r\n    for (let j = 0; j < 12; j += 1) {\r\n      data.push([j, i, utils.getRandomNumber(1, 12)]);\r\n    }\r\n  }\r\n\r\n  if ($echartHeatmapChart) {\r\n    const userOptions = utils.getData($echartHeatmapChart, 'options');\r\n    const chart = window.echarts.init($echartHeatmapChart);\r\n\r\n    const getDefaultOptions = () => ({\r\n      gradientColor: [\r\n        utils.rgbaColor(utils.getColors()['info'], 1),\r\n        utils.rgbaColor(utils.getColors()['primary'], 1)\r\n      ],\r\n\r\n      tooltip: {\r\n        position: 'top',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1\r\n      },\r\n      grid: {\r\n        right: 5,\r\n        left: 5,\r\n        top: 5,\r\n        bottom: 5,\r\n        containLabel: true\r\n      },\r\n      xAxis: {\r\n        axisTick: { show: false },\r\n        type: 'category',\r\n        data: hours,\r\n        splitArea: {\r\n          show: true\r\n        },\r\n        axisLabel: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['400']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        axisTick: { show: false },\r\n        type: 'category',\r\n        data: days,\r\n        axisLabel: {\r\n          formatter: value => value.substring(0, 3),\r\n          color: utils.getGrays()['600']\r\n        },\r\n        splitArea: {\r\n          show: true\r\n        },\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['400']\r\n          }\r\n        }\r\n      },\r\n      visualMap: {\r\n        show: false,\r\n        min: 0,\r\n        max: 10,\r\n        calculable: true,\r\n        orient: 'horizontal',\r\n        left: 'center',\r\n        bottom: '0%',\r\n        textStyle: {\r\n          color: utils.getGrays()['600'],\r\n          fontWeight: 500\r\n        }\r\n      },\r\n\r\n      series: [\r\n        {\r\n          type: 'heatmap',\r\n          data: data,\r\n          label: {\r\n            show: true\r\n          },\r\n          itemStyle: {\r\n            borderColor: utils.getColor('white'),\r\n            borderWidth: 3\r\n          },\r\n          emphasis: {\r\n            itemStyle: {\r\n              shadowBlur: 10,\r\n              shadowColor: utils.rgbaColor(utils.getColors()['black'], 0.5)\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsHeatMapSingleSeriesChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                       Echarts Horizontal Bar Chart                         */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsHorizontalBarChartInit = () => {\r\n  const $horizontalBarChartEl = document.querySelector('.echart-horizontal-bar-chart-example');\r\n\r\n  if ($horizontalBarChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($horizontalBarChartEl, 'options');\r\n    const chart = window.echarts.init($horizontalBarChartEl);\r\n\r\n    const months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December'\r\n    ];\r\n\r\n    const data = [1272, 1301, 1402, 1216, 1086, 1236, 1219, 1330, 1367, 1416, 1297, 1204];\r\n\r\n    // const tooltipFormatter = params => {\r\n    //   return `\r\n    //   <div>\r\n    //       <h6 class=\"fs--1 text-700 mb-0\">\r\n    //         <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\r\n    //         ${params[0].name} : ${params[0].value}\r\n    //       </h6>\r\n    //   </div>\r\n    //   `;\r\n    // };\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        formatter: tooltipFormatter,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: 'value',\r\n        boundaryGap: false,\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        },\r\n        axisTick: { show: true },\r\n        axisLabel: {\r\n          color: utils.getGrays()['500']\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        },\r\n        min: 600\r\n      },\r\n      yAxis: {\r\n        type: 'category',\r\n        data: months,\r\n        boundaryGap: true,\r\n        axisLabel: {\r\n          formatter: value => value.substring(0, 3),\r\n          show: true,\r\n          color: utils.getGrays()['500'],\r\n          margin: 15\r\n        },\r\n        splitLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          type: 'bar',\r\n          name: 'Total',\r\n          data,\r\n          lineStyle: { color: utils.getColor('primary') },\r\n          itemStyle: {\r\n            color: utils.getColor('primary'),\r\n            barBorderRadius: [0, 3, 3, 0]\r\n          },\r\n          showSymbol: false,\r\n          symbol: 'circle',\r\n          smooth: false,\r\n          hoverAnimation: true\r\n        }\r\n      ],\r\n      grid: { right: '3%', left: '10%', bottom: '10%', top: '5%' }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsHorizontalBarChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Line Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsLineAreaChartInit = () => {\r\n  const $lineAreaChartEl = document.querySelector('.echart-line-area-chart-example');\r\n\r\n  if ($lineAreaChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($lineAreaChartEl, 'options');\r\n    const chart = window.echarts.init($lineAreaChartEl);\r\n\r\n    const months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December'\r\n    ];\r\n\r\n    const data = [1142, 1160, 1179, 946, 1420, 1434, 986, 1247, 1051, 1297, 927, 1282];\r\n\r\n    const tooltipFormatter = params => {\r\n      return `\r\n      <div>\r\n          <h6 class=\"fs--1 text-700 mb-0\">\r\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].borderColor}'></span>\r\n            ${params[0].name} : ${params[0].value}\r\n          </h6>\r\n      </div>\r\n      `;\r\n    };\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        formatter: tooltipFormatter,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: months,\r\n        boundaryGap: false,\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          color: utils.getGrays()['400'],\r\n          formatter: value => value.substring(0, 3),\r\n          margin: 15\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        boundaryGap: false,\r\n        axisLabel: {\r\n          show: true,\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        axisTick: { show: false },\r\n        axisLine: { show: false },\r\n        min: 600\r\n      },\r\n      series: [\r\n        {\r\n          type: 'line',\r\n          data,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('primary'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('primary')\r\n          },\r\n          showSymbol: false,\r\n          symbolSize: 10,\r\n          symbol: 'circle',\r\n          smooth: false,\r\n          hoverAnimation: true,\r\n          areaStyle: {\r\n            color: {\r\n              type: 'linear',\r\n              x: 0,\r\n              y: 0,\r\n              x2: 0,\r\n              y2: 1,\r\n              colorStops: [\r\n                {\r\n                  offset: 0,\r\n                  color: utils.rgbaColor(utils.getColors().primary, 0.5)\r\n                },\r\n                {\r\n                  offset: 1,\r\n                  color: utils.rgbaColor(utils.getColors().primary, 0)\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      grid: { right: '3%', left: '10%', bottom: '10%', top: '5%' }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsLineAreaChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Line Gradient Chart                    */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsLineGradientChartInit = () => {\r\n  const $lineGradientChartEl = document.querySelector('.echart-line-gradient-chart-example');\r\n\r\n  if ($lineGradientChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($lineGradientChartEl, 'options');\r\n    const chart = window.echarts.init($lineGradientChartEl);\r\n\r\n    const data = [\r\n      ['2021-06-05', 116],\r\n      ['2021-06-06', 129],\r\n      ['2021-06-07', 135],\r\n      ['2021-06-08', 86],\r\n      ['2021-06-09', 73],\r\n      ['2021-06-10', 85],\r\n      ['2021-06-11', 73],\r\n      ['2021-06-12', 68],\r\n      ['2021-06-13', 92],\r\n      ['2021-06-14', 130],\r\n      ['2021-06-15', 245],\r\n      ['2021-06-16', 139],\r\n      ['2021-06-17', 115],\r\n      ['2021-06-18', 111],\r\n      ['2021-06-19', 309],\r\n      ['2021-06-20', 206],\r\n      ['2021-06-21', 137],\r\n      ['2021-06-22', 128],\r\n      ['2021-06-23', 85],\r\n      ['2021-06-24', 94],\r\n      ['2021-06-25', 71],\r\n      ['2021-06-26', 106],\r\n      ['2021-06-27', 84],\r\n      ['2021-06-28', 93],\r\n      ['2021-06-29', 85],\r\n      ['2021-06-30', 73],\r\n      ['2021-07-01', 83],\r\n      ['2021-07-02', 125],\r\n      ['2021-07-03', 107],\r\n      ['2021-07-04', 82],\r\n      ['2021-07-05', 44],\r\n      ['2021-07-06', 72],\r\n      ['2021-07-07', 106],\r\n      ['2021-07-08', 107],\r\n      ['2021-07-09', 66],\r\n      ['2021-07-10', 91],\r\n      ['2021-07-11', 92],\r\n      ['2021-07-12', 113],\r\n      ['2021-07-13', 107],\r\n      ['2021-07-14', 131],\r\n      ['2021-07-15', 111],\r\n      ['2021-07-16', 64],\r\n      ['2021-07-17', 69],\r\n      ['2021-07-18', 88],\r\n      ['2021-07-19', 77],\r\n      ['2021-07-20', 83],\r\n      ['2021-07-21', 111],\r\n      ['2021-07-22', 57],\r\n      ['2021-07-23', 55],\r\n      ['2021-07-24', 60]\r\n    ];\r\n\r\n    const dateList = data.map(function (item) {\r\n      return item[0];\r\n    });\r\n    const valueList = data.map(function (item) {\r\n      return item[1];\r\n    });\r\n\r\n    const getDefaultOptions = () => ({\r\n      visualMap: {\r\n        show: false,\r\n        type: 'continuous',\r\n        dimension: 0,\r\n        min: 0,\r\n        max: dateList.length - 1,\r\n        color: [utils.getColor('danger'), utils.getColor('warning')]\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        },\r\n        formatter: tooltipFormatter\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: dateList,\r\n        axisLabel: {\r\n          formatter: value => window.dayjs(value).format('MMM DD'),\r\n          color: utils.getGrays()['500'],\r\n          margin: 15\r\n        },\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        axisPointer: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        axisLabel: {\r\n          show: true,\r\n          color: utils.getGrays()['500'],\r\n          margin: 15\r\n        },\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['200'],\r\n            type: 'dashed'\r\n          }\r\n        }\r\n      },\r\n      grid: { right: '3%', left: '8%', bottom: '10%', top: '5%' },\r\n      series: {\r\n        name: 'Total',\r\n        type: 'line',\r\n        showSymbol: false,\r\n        symbolSize: 10,\r\n        symbol: 'circle',\r\n        data: valueList,\r\n        itemStyle: {\r\n          color: utils.getGrays().white,\r\n          borderWidth: 2\r\n        }\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsLineGradientChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                           Echarts Line Log Chart                           */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsLineLogChartInit = () => {\r\n  const $lineLogChartEl = document.querySelector('.echart-line-log-chart-example');\r\n\r\n  if ($lineLogChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($lineLogChartEl, 'options');\r\n    const chart = window.echarts.init($lineLogChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        },\r\n        formatter: tooltipFormatter\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        },\r\n        axisLabel: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n        splitLine: { show: false },\r\n        data: Array.from(Array(10).keys()).map(item => item + 1)\r\n      },\r\n      yAxis: {\r\n        type: 'log',\r\n        axisLabel: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Index Of 3',\r\n          type: 'line',\r\n          data: [1, 3, 9, 27, 81, 247, 741, 2223, 6669],\r\n          symbolSize: 7,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('danger'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('danger')\r\n          },\r\n          symbol: 'circle'\r\n        },\r\n        {\r\n          name: 'Index of 2',\r\n          type: 'line',\r\n          data: [1, 2, 4, 8, 16, 32, 64, 128, 256],\r\n          symbolSize: 7,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('success'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('success')\r\n          },\r\n          symbol: 'circle'\r\n        },\r\n        {\r\n          name: 'Index of 1/2',\r\n          type: 'line',\r\n          data: [1 / 2, 1 / 4, 1 / 8, 1 / 16, 1 / 32, 1 / 64, 1 / 128, 1 / 256, 1 / 512],\r\n          symbolSize: 7,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('info'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('info')\r\n          },\r\n          symbol: 'circle'\r\n        }\r\n      ],\r\n      grid: {\r\n        right: 10,\r\n        left: 5,\r\n        bottom: 5,\r\n        top: 10,\r\n        containLabel: true\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsLineLogChartInit;\r\n","import utils from '../../../utils';\r\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                        Echarts Line Marker Chart                           */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsLineMarkerChartInit = () => {\r\n  const $lineMarkerChartEl = document.querySelector('.echart-line-marker-chart-example');\r\n\r\n  if ($lineMarkerChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($lineMarkerChartEl, 'options');\r\n    const chart = window.echarts.init($lineMarkerChartEl);\r\n\r\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\n    const getDefaultOptions = () => ({\r\n      color: [\r\n        utils.getColor('primary'),\r\n        utils.getColor('warning')\r\n        // utils.getColor('danger')\r\n      ],\r\n      legend: {\r\n        data: [\r\n          {\r\n            name: 'Max',\r\n            textStyle: {\r\n              color: utils.getGrays()['600']\r\n            }\r\n          },\r\n          {\r\n            name: 'Min',\r\n            textStyle: {\r\n              color: utils.getGrays()['600']\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        position(pos, params, dom, rect, size) {\r\n          return getPosition(pos, params, dom, rect, size);\r\n        },\r\n        axisPointer: {\r\n          type: 'none'\r\n        },\r\n        formatter: tooltipFormatter\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: days,\r\n        boundaryGap: false,\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          formatter: value => value.substring(0, 3),\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        boundaryGap: false,\r\n        axisLabel: {\r\n          show: true,\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        axisTick: { show: false },\r\n        axisLine: { show: false }\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Max',\r\n          type: 'line',\r\n          data: [10, 11, 13, 11, 12, 9, 12],\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('primary'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('primary')\r\n          },\r\n          symbol: 'circle',\r\n          markPoint: {\r\n            itemStyle: {\r\n              color: utils.getColor('primary')\r\n            },\r\n            data: [\r\n              { type: 'max', name: 'Max' },\r\n              { type: 'min', name: 'Min' }\r\n            ]\r\n          },\r\n          markLine: {\r\n            lineStyle: {\r\n              color: utils.getColor('primary')\r\n            },\r\n            label: {\r\n              color: utils.getGrays()['600']\r\n            },\r\n            data: [{ type: 'average', name: 'average' }]\r\n          }\r\n        },\r\n        {\r\n          name: 'Min',\r\n          type: 'line',\r\n          data: [1, -2, 2, 5, 3, 2, 0],\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('danger'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('danger')\r\n          },\r\n          symbol: 'circle',\r\n          markPoint: {\r\n            itemStyle: {\r\n              color: utils.getColor('danger')\r\n            },\r\n            label: {\r\n              color: '#fff'\r\n            },\r\n            data: [{ name: 'Weekly lowest', value: -2, xAxis: 1, yAxis: -1.5 }]\r\n          },\r\n          markLine: {\r\n            lineStyle: {\r\n              color: utils.getColor('danger')\r\n            },\r\n            label: {\r\n              color: utils.getGrays()['600']\r\n            },\r\n            data: [\r\n              { type: 'average', name: 'average' },\r\n              [\r\n                {\r\n                  symbol: 'none',\r\n                  x: '90%',\r\n                  yAxis: 'max'\r\n                },\r\n                {\r\n                  symbol: 'circle',\r\n                  label: {\r\n                    position: 'start',\r\n                    formatter: 'Max'\r\n                  },\r\n                  type: 'max',\r\n                  name: 'Highest point'\r\n                }\r\n              ]\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      grid: { right: '8%', left: '5%', bottom: '10%', top: '15%' }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsLineMarkerChartInit;\r\n","import utils from '../../../utils';\r\nimport { getPosition, echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Line Race Chart                        */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsLineRaceChartInit = () => {\r\n  const $lineRaceChartEl = document.querySelector('.echart-line-race-chart-example');\r\n\r\n  if ($lineRaceChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($lineRaceChartEl, 'options');\r\n    const chart = window.echarts.init($lineRaceChartEl);\r\n\r\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\n    const getDefaultOptions = () => ({\r\n      color: [utils.getColor('primary'), utils.getColor('warning')],\r\n      legend: {\r\n        data: [\r\n          {\r\n            name: 'Max',\r\n            textStyle: {\r\n              color: utils.getGrays()['600']\r\n            }\r\n          },\r\n          {\r\n            name: 'Min',\r\n            textStyle: {\r\n              color: utils.getGrays()['600']\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        // formatter: tooltipFormatter,\r\n        transitionDuration: 0,\r\n        position(pos, params, dom, rect, size) {\r\n          return getPosition(pos, params, dom, rect, size);\r\n        },\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: days,\r\n        boundaryGap: false,\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          formatter: value => value.substring(0, 3),\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        },\r\n        boundaryGap: false,\r\n        axisLabel: {\r\n          show: true,\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        axisTick: { show: false },\r\n        axisLine: { show: false }\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Max',\r\n          type: 'line',\r\n          data: [10, 11, 13, 11, 12, 9, 12],\r\n          markPoint: {\r\n            data: [\r\n              { type: 'max', name: 'Max' },\r\n              { type: 'min', name: 'Min' }\r\n            ]\r\n          },\r\n          markLine: {\r\n            label: {\r\n              color: utils.getGrays()['600']\r\n            },\r\n            data: [{ type: 'average', name: 'average' }]\r\n          }\r\n        },\r\n        {\r\n          name: 'Min',\r\n          type: 'line',\r\n          data: [1, -2, 2, 5, 3, 2, 0],\r\n          markPoint: {\r\n            label: {\r\n              color: '#fff'\r\n            },\r\n            data: [{ name: 'Weekly lowest', value: -2, xAxis: 1, yAxis: -1.5 }]\r\n          },\r\n          markLine: {\r\n            label: {\r\n              color: utils.getGrays()['600']\r\n            },\r\n            data: [\r\n              { type: 'average', name: 'average' },\r\n              [\r\n                {\r\n                  symbol: 'none',\r\n                  x: '90%',\r\n                  yAxis: 'max'\r\n                },\r\n                {\r\n                  symbol: 'circle',\r\n                  label: {\r\n                    position: 'start',\r\n                    formatter: 'Max'\r\n                  },\r\n                  type: 'max',\r\n                  name: 'Highest point'\r\n                }\r\n              ]\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      grid: { right: '8%', left: '5%', bottom: '10%', top: '15%' }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsLineRaceChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                    Echarts Line Share Dataset Chart                        */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsLineShareDatasetChartInit = () => {\r\n  const $lineShareChartEl = document.querySelector('.echart-line-share-dataset-chart-example');\r\n\r\n  if ($lineShareChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($lineShareChartEl, 'options');\r\n    const chart = window.echarts.init($lineShareChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      color: [\r\n        utils.getColor('danger'),\r\n        utils.getColor('warning'),\r\n        utils.getColor('info'),\r\n        utils.getColor('primary')\r\n      ],\r\n      legend: {\r\n        top: 0,\r\n        textStyle: {\r\n          color: utils.getGrays()['700']\r\n        }\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        showContent: false\r\n      },\r\n      dataset: {\r\n        source: [\r\n          ['product', '2012', '2013', '2014', '2015', '2016', '2017'],\r\n          ['Milk Tea', 56.5, 82.1, 88.7, 70.1, 53.4, 85.1],\r\n          ['Matcha Latte', 51.1, 51.4, 55.1, 53.3, 73.8, 68.7],\r\n          ['Cheese Cocoa', 40.1, 62.2, 69.5, 36.4, 45.2, 32.5],\r\n          ['Walnut Brownie', 25.2, 37.1, 41.2, 18, 33.9, 49.1]\r\n        ]\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        },\r\n        axisLabel: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n        axisPointer: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        gridIndex: 0,\r\n        axisLabel: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          type: 'line',\r\n          smooth: true,\r\n          seriesLayoutBy: 'row',\r\n          emphasis: { focus: 'series' },\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('danger'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('danger')\r\n          },\r\n          symbol: 'circle'\r\n        },\r\n        {\r\n          type: 'line',\r\n          smooth: true,\r\n          seriesLayoutBy: 'row',\r\n          emphasis: { focus: 'series' },\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('info'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('info')\r\n          },\r\n          symbol: 'circle'\r\n        },\r\n        {\r\n          type: 'line',\r\n          smooth: true,\r\n          seriesLayoutBy: 'row',\r\n          emphasis: { focus: 'series' },\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('warning'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('warning')\r\n          },\r\n          symbol: 'circle'\r\n        },\r\n        {\r\n          type: 'line',\r\n          smooth: true,\r\n          seriesLayoutBy: 'row',\r\n          emphasis: { focus: 'series' },\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('primary'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('primary')\r\n          },\r\n          symbol: 'circle'\r\n        },\r\n        {\r\n          type: 'pie',\r\n          id: 'pie',\r\n          radius: '30%',\r\n          center: ['50%', '28%'],\r\n          emphasis: { focus: 'data' },\r\n          label: {\r\n            formatter: '{b}: {@2012} ({d}%)',\r\n            color: utils.getGrays()['600']\r\n          },\r\n          encode: {\r\n            itemName: 'product',\r\n            value: '2012',\r\n            tooltip: '2012'\r\n          }\r\n        }\r\n      ],\r\n      grid: {\r\n        right: 10,\r\n        left: 5,\r\n        bottom: 5,\r\n        top: '55%',\r\n        containLabel: true\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n\r\n    chart.on('updateAxisPointer', function (event) {\r\n      var xAxisInfo = event.axesInfo[0];\r\n      if (xAxisInfo) {\r\n        var dimension = xAxisInfo.value + 1;\r\n        chart.setOption({\r\n          series: {\r\n            id: 'pie',\r\n            label: {\r\n              formatter: '{b}: {@[' + dimension + ']} ({d}%)'\r\n            },\r\n            encode: {\r\n              value: dimension,\r\n              tooltip: dimension\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport default echartsLineShareDatasetChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                Session By Country Map                      */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsUsaMapInit = () => {\r\n  const $usaMapEl = document.querySelector('.echart-map-usa-example');\r\n\r\n  const data = [\r\n    { name: 'Alabama', value: 4822023 },\r\n    { name: 'Alaska', value: 731449 },\r\n    { name: 'Arizona', value: 6553255 },\r\n    { name: 'Arkansas', value: 2949131 },\r\n    { name: 'California', value: 38041430 },\r\n    { name: 'Colorado', value: 5187582 },\r\n    { name: 'Connecticut', value: 3590347 },\r\n    { name: 'Delaware', value: 917092 },\r\n    { name: 'District of Columbia', value: 632323 },\r\n    { name: 'Florida', value: 19317568 },\r\n    { name: 'Georgia', value: 9919945 },\r\n    { name: 'Hawaii', value: 1392313 },\r\n    { name: 'Idaho', value: 1595728 },\r\n    { name: 'Illinois', value: 12875255 },\r\n    { name: 'Indiana', value: 6537334 },\r\n    { name: 'Iowa', value: 3074186 },\r\n    { name: 'Kansas', value: 2885905 },\r\n    { name: 'Kentucky', value: 4380415 },\r\n    { name: 'Louisiana', value: 4601893 },\r\n    { name: 'Maine', value: 1329192 },\r\n    { name: 'Maryland', value: 5884563 },\r\n    { name: 'Massachusetts', value: 6646144 },\r\n    { name: 'Michigan', value: 9883360 },\r\n    { name: 'Minnesota', value: 5379139 },\r\n    { name: 'Mississippi', value: 2984926 },\r\n    { name: 'Missouri', value: 6021988 },\r\n    { name: 'Montana', value: 1005141 },\r\n    { name: 'Nebraska', value: 1855525 },\r\n    { name: 'Nevada', value: 2758931 },\r\n    { name: 'New Hampshire', value: 1320718 },\r\n    { name: 'New Jersey', value: 8864590 },\r\n    { name: 'New Mexico', value: 2085538 },\r\n    { name: 'New York', value: 19570261 },\r\n    { name: 'North Carolina', value: 9752073 },\r\n    { name: 'North Dakota', value: 699628 },\r\n    { name: 'Ohio', value: 11544225 },\r\n    { name: 'Oklahoma', value: 3814820 },\r\n    { name: 'Oregon', value: 3899353 },\r\n    { name: 'Pennsylvania', value: 12763536 },\r\n    { name: 'Rhode Island', value: 1050292 },\r\n    { name: 'South Carolina', value: 4723723 },\r\n    { name: 'South Dakota', value: 833354 },\r\n    { name: 'Tennessee', value: 6456243 },\r\n    { name: 'Texas', value: 26059203 },\r\n    { name: 'Utah', value: 2855287 },\r\n    { name: 'Vermont', value: 626011 },\r\n    { name: 'Virginia', value: 8185867 },\r\n    { name: 'Washington', value: 6897012 },\r\n    { name: 'West Virginia', value: 1855413 },\r\n    { name: 'Wisconsin', value: 5726398 },\r\n    { name: 'Wyoming', value: 576412 },\r\n    { name: 'Puerto Rico', value: 3667084 }\r\n  ];\r\n\r\n  if ($usaMapEl) {\r\n    const userOptions = utils.getData($usaMapEl, 'options');\r\n    const chart = window.echarts.init($usaMapEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'item',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        formatter: params => {\r\n          return `<strong>${params.data.name} :</strong> ${params.data.value}`;\r\n        }\r\n      },\r\n      toolbox: {\r\n        show: false,\r\n        feature: {\r\n          restore: {}\r\n        }\r\n      },\r\n      visualMap: {\r\n        left: 'right',\r\n        min: 500000,\r\n        max: 38000000,\r\n        inRange: {\r\n          color: [utils.getColor('primary'), utils.getColor('info')]\r\n        },\r\n        text: ['High', 'Low'],\r\n        calculable: true,\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n        formatter: value => `${value / 1000}k`\r\n      },\r\n      series: [\r\n        {\r\n          left: 10,\r\n          name: 'USA PopEstimates',\r\n          type: 'map',\r\n          zoom: 1.2,\r\n          roam: true,\r\n          scaleLimit: {\r\n            min: 1,\r\n            max: 5\r\n          },\r\n          itemStyle: {\r\n            borderColor: utils.getGrays()['300']\r\n          },\r\n          label: {\r\n            color: '#fff'\r\n          },\r\n          map: 'USA',\r\n          emphasis: {\r\n            label: {\r\n              show: true,\r\n              color: '#fff'\r\n            },\r\n\r\n            itemStyle: {\r\n              areaColor: utils.getColor('warning')\r\n            }\r\n          },\r\n          data\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n    document.querySelector('.usa-map-reset').addEventListener('click', () => {\r\n      chart.dispatchAction({\r\n        type: 'restore'\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nexport default echartsUsaMapInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Pie Chart                              */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsPieChartInit = () => {\r\n  const $pieChartEl = document.querySelector('.echart-pie-chart-example');\r\n\r\n  if ($pieChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($pieChartEl, 'options');\r\n    const chart = window.echarts.init($pieChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      legend: {\r\n        left: 'left',\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          type: 'pie',\r\n          radius: window.innerWidth < 530 ? '45%' : '60%',\r\n          label: {\r\n            color: utils.getGrays()['700']\r\n          },\r\n          center: ['50%', '55%'],\r\n          data: [\r\n            {\r\n              value: 1048,\r\n              name: 'Facebook',\r\n              itemStyle: {\r\n                color: utils.getColor('primary')\r\n              }\r\n            },\r\n            {\r\n              value: 735,\r\n              name: 'Youtube',\r\n              itemStyle: {\r\n                color: utils.getColor('danger')\r\n              }\r\n            },\r\n            {\r\n              value: 580,\r\n              name: 'Twitter',\r\n              itemStyle: {\r\n                color: utils.getColor('info')\r\n              }\r\n            },\r\n            {\r\n              value: 484,\r\n              name: 'Linkedin',\r\n              itemStyle: {\r\n                color: utils.getColor('success')\r\n              }\r\n            },\r\n            {\r\n              value: 300,\r\n              name: 'Github',\r\n              itemStyle: {\r\n                color: utils.getColor('warning')\r\n              }\r\n            }\r\n          ],\r\n          emphasis: {\r\n            itemStyle: {\r\n              shadowBlur: 10,\r\n              shadowOffsetX: 0,\r\n              shadowColor: utils.rgbaColor(utils.getGrays()['600'], 0.5)\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      tooltip: {\r\n        trigger: 'item',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n\r\n    //- set chart radius on window resize\r\n    utils.resize(() => {\r\n      if (window.innerWidth < 530) {\r\n        chart.setOption({\r\n          series: [\r\n            {\r\n              radius: '45%'\r\n            }\r\n          ]\r\n        });\r\n      } else\r\n        chart.setOption({\r\n          series: [\r\n            {\r\n              radius: '60%'\r\n            }\r\n          ]\r\n        });\r\n    });\r\n  }\r\n};\r\n\r\nexport default echartsPieChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Doughnut Chart                         */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsPieEdgeAlignChartInit = () => {\r\n  const $echartPieAEdgeAlignChartEl = document.querySelector('.echart-pie-edge-align-chart');\r\n\r\n  const data = [\r\n    {\r\n      value: 800,\r\n      name: 'Starter',\r\n      itemStyle: {\r\n        color: utils.rgbaColor(utils.getColors()['primary'], 0.5)\r\n      }\r\n    },\r\n    {\r\n      value: 1048,\r\n      name: 'Starter Pro',\r\n      itemStyle: {\r\n        color: utils.getColor('danger')\r\n      }\r\n    },\r\n    {\r\n      value: 735,\r\n      name: 'Basic',\r\n      itemStyle: {\r\n        color: utils.getColor('primary')\r\n      }\r\n    },\r\n    {\r\n      value: 580,\r\n      name: 'Optimal',\r\n      itemStyle: {\r\n        color: utils.getColor('secondary')\r\n      }\r\n    },\r\n    {\r\n      value: 484,\r\n      name: 'Business',\r\n      itemStyle: {\r\n        color: utils.getColor('warning')\r\n      }\r\n    },\r\n    {\r\n      value: 600,\r\n      name: 'Classic addition',\r\n      itemStyle: {\r\n        color: utils.rgbaColor(utils.getColors()['warning'], 0.8)\r\n      }\r\n    },\r\n    {\r\n      value: 300,\r\n      name: 'Premium',\r\n      itemStyle: {\r\n        color: utils.getColor('success')\r\n      }\r\n    },\r\n    {\r\n      value: 300,\r\n      name: 'Platinum',\r\n      itemStyle: {\r\n        color: utils.getColor('info')\r\n      }\r\n    },\r\n    {\r\n      value: 400,\r\n      name: 'Platinum Pro',\r\n      itemStyle: {\r\n        color: utils.rgbaColor(utils.getColors()['primary'], 0.5)\r\n      }\r\n    }\r\n  ];\r\n\r\n  if ($echartPieAEdgeAlignChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($echartPieAEdgeAlignChartEl, 'options');\r\n    const chart = window.echarts.init($echartPieAEdgeAlignChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      title: [\r\n        {\r\n          text: 'Pie Edge Align Chart',\r\n          left: 'center',\r\n          textStyle: {\r\n            color: utils.getGrays()['600']\r\n          }\r\n        },\r\n        {\r\n          subtext: 'alignTo: \"edge\"',\r\n          left: '50%',\r\n          top: '85%',\r\n          textAlign: 'center',\r\n          subtextStyle: {\r\n            color: utils.getGrays()['700']\r\n          }\r\n        }\r\n      ],\r\n\r\n      tooltip: {\r\n        trigger: 'item',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n\r\n      series: [\r\n        {\r\n          type: 'pie',\r\n          radius: window.innerWidth < 530 ? '45%' : '60%',\r\n          center: ['50%', '50%'],\r\n          data: data,\r\n          label: {\r\n            position: 'outer',\r\n            alignTo: 'edge',\r\n            margin: 20,\r\n            color: utils.getGrays()['700']\r\n          },\r\n          left: '5%',\r\n          right: '5%',\r\n          top: 0,\r\n          bottom: 0\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n\r\n    //- set chart radius on window resize\r\n    utils.resize(() => {\r\n      if (window.innerWidth < 530) {\r\n        chart.setOption({\r\n          series: [{ radius: '45%' }]\r\n        });\r\n      } else\r\n        chart.setOption({\r\n          series: [{ radius: '60%' }]\r\n        });\r\n    });\r\n  }\r\n};\r\n\r\nexport default echartsPieEdgeAlignChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Doughnut Chart                         */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsPieLabelAlignChartInit = () => {\r\n  const $echartPieLabelAlignChartEl = document.querySelector('.echart-pie-label-align-chart');\r\n\r\n  if ($echartPieLabelAlignChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($echartPieLabelAlignChartEl, 'options');\r\n    const chart = window.echarts.init($echartPieLabelAlignChartEl);\r\n\r\n    const data = [\r\n      {\r\n        value: 800,\r\n        name: 'Starter',\r\n        itemStyle: {\r\n          color: utils.rgbaColor(utils.getColors()['primary'], 0.5)\r\n        }\r\n      },\r\n      {\r\n        value: 1048,\r\n        name: 'Starter Pro',\r\n        itemStyle: {\r\n          color: utils.getColor('danger')\r\n        }\r\n      },\r\n      {\r\n        value: 735,\r\n        name: 'Basic',\r\n        itemStyle: {\r\n          color: utils.getColor('primary')\r\n        }\r\n      },\r\n      {\r\n        value: 580,\r\n        name: 'Optimal',\r\n        itemStyle: {\r\n          color: utils.getColor('secondary')\r\n        }\r\n      },\r\n      {\r\n        value: 484,\r\n        name: 'Business',\r\n        itemStyle: {\r\n          color: utils.getColor('warning')\r\n        }\r\n      },\r\n      {\r\n        value: 600,\r\n        name: 'Classic addition',\r\n        itemStyle: {\r\n          color: utils.rgbaColor(utils.getColors()['warning'], 0.8)\r\n        }\r\n      },\r\n      {\r\n        value: 300,\r\n        name: 'Premium',\r\n        itemStyle: {\r\n          color: utils.getColor('success')\r\n        }\r\n      },\r\n      {\r\n        value: 300,\r\n        name: 'Platinum',\r\n        itemStyle: {\r\n          color: utils.getColor('info')\r\n        }\r\n      },\r\n      {\r\n        value: 400,\r\n        name: 'Platinum Pro',\r\n        itemStyle: {\r\n          color: utils.rgbaColor(utils.getColors()['primary'], 0.5)\r\n        }\r\n      }\r\n    ];\r\n\r\n    const getDefaultOptions = () => ({\r\n      title: [\r\n        {\r\n          text: 'Pie Label Align Chart',\r\n          left: 'center',\r\n          textStyle: {\r\n            color: utils.getGrays()['600']\r\n          }\r\n        },\r\n        {\r\n          subtext: 'alignTo: \"labelLine\"',\r\n          left: '50%',\r\n          top: '85%',\r\n          textAlign: 'center',\r\n          subtextStyle: {\r\n            color: utils.getGrays()['700']\r\n          }\r\n        }\r\n      ],\r\n\r\n      tooltip: {\r\n        trigger: 'item',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n\r\n      series: [\r\n        {\r\n          type: 'pie',\r\n          radius: window.innerWidth < 530 ? '45%' : '60%',\r\n          center: ['50%', '50%'],\r\n          data: data,\r\n          label: {\r\n            position: 'outer',\r\n            alignTo: 'labelLine',\r\n            bleedMargin: 5,\r\n            color: utils.getGrays()['700']\r\n          },\r\n          left: '5%',\r\n          right: '5%',\r\n          top: 0,\r\n          bottom: 0\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n\r\n    //- set chart radius on window resize\r\n    utils.resize(() => {\r\n      if (window.innerWidth < 530) {\r\n        chart.setOption({\r\n          series: [{ radius: '45%' }]\r\n        });\r\n      } else\r\n        chart.setOption({\r\n          series: [{ radius: '60%' }]\r\n        });\r\n    });\r\n  }\r\n};\r\n\r\nexport default echartsPieLabelAlignChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Doughnut Chart                         */\r\n/* -------------------------------------------------------------------------- */\r\nlet data1 = [\r\n  {\r\n    value: 1048,\r\n    name: 'Starter',\r\n    itemStyle: {\r\n      color: utils.getColor('danger')\r\n    }\r\n  },\r\n  {\r\n    value: 735,\r\n    name: 'Basic',\r\n    itemStyle: {\r\n      color: utils.getColor('primary')\r\n    }\r\n  },\r\n  {\r\n    value: 580,\r\n    name: 'Optimal',\r\n    itemStyle: {\r\n      color: utils.getColor('secondary')\r\n    }\r\n  },\r\n  {\r\n    value: 484,\r\n    name: 'Business',\r\n    itemStyle: {\r\n      color: utils.getColor('warning')\r\n    }\r\n  },\r\n  {\r\n    value: 300,\r\n    name: 'Premium',\r\n    itemStyle: {\r\n      color: utils.getColor('success')\r\n    }\r\n  },\r\n  {\r\n    value: 300,\r\n    name: 'Platinum',\r\n    itemStyle: {\r\n      color: utils.getColor('info')\r\n    }\r\n  }\r\n];\r\n\r\nlet data2 = [\r\n  {\r\n    value: 1048,\r\n    name: 'Facebook',\r\n    itemStyle: {\r\n      color: utils.getColor('primary')\r\n    }\r\n  },\r\n  {\r\n    value: 735,\r\n    name: 'Youtube',\r\n    itemStyle: {\r\n      color: utils.getColor('danger')\r\n    }\r\n  },\r\n  {\r\n    value: 580,\r\n    name: 'Twitter',\r\n    itemStyle: {\r\n      color: utils.getColor('info')\r\n    }\r\n  },\r\n  {\r\n    value: 484,\r\n    name: 'Linkedin',\r\n    itemStyle: {\r\n      color: utils.getColor('success')\r\n    }\r\n  },\r\n  {\r\n    value: 300,\r\n    name: 'Github',\r\n    itemStyle: {\r\n      color: utils.getColor('warning')\r\n    }\r\n  }\r\n];\r\nconst defaultRadius = { radius: '55%' };\r\nconst smallRadius = { radius: '48%' };\r\n\r\nconst echartsPieMultipleChartInit = () => {\r\n  const $echartPieMultipleChartEl = document.querySelector('.echart-pie-multiple-chart');\r\n\r\n  if ($echartPieMultipleChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($echartPieMultipleChartEl, 'options');\r\n    const chart = window.echarts.init($echartPieMultipleChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      title: [\r\n        {\r\n          text: 'Pie Multiple Chart',\r\n          left: 'center',\r\n          textStyle: {\r\n            color: utils.getGrays()['600']\r\n          }\r\n        }\r\n      ],\r\n\r\n      tooltip: {\r\n        trigger: 'item',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n\r\n      series: [\r\n        {\r\n          type: 'pie',\r\n          radius: window.innerWidth < 450 ? '48%' : '55%',\r\n          center: ['25%', '50%'],\r\n          data: data1,\r\n          label: {\r\n            show: false\r\n          }\r\n        },\r\n        {\r\n          type: 'pie',\r\n          radius: window.innerWidth < 450 ? '48%' : '55%',\r\n          center: ['75%', '50%'],\r\n          avoidLabelOverlap: false,\r\n          label: {\r\n            show: false\r\n          },\r\n          data: data2\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n\r\n    //- set chart radius on window resize\r\n    utils.resize(() => {\r\n      if (window.innerWidth < 450) {\r\n        chart.setOption({\r\n          series: [smallRadius, smallRadius]\r\n        });\r\n      } else\r\n        chart.setOption({\r\n          series: [defaultRadius, defaultRadius]\r\n        });\r\n    });\r\n  }\r\n};\r\n\r\nexport default echartsPieMultipleChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Pie Chart                              */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsRadarChartInit = () => {\r\n  const $radarChartEl = document.querySelector('.echart-radar-chart-example');\r\n\r\n  if ($radarChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($radarChartEl, 'options');\r\n    const chart = window.echarts.init($radarChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      legend: {\r\n        orient: 'vertical',\r\n        left: 'left',\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        }\r\n      },\r\n      tooltip: {\r\n        trigger: 'item',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n\r\n      radar: {\r\n        indicator: [\r\n          { name: 'Marketing', max: 6500 },\r\n          { name: 'Admin', max: 16000 },\r\n          { name: 'Tech', max: 30000 },\r\n          { name: 'Support', max: 38000 },\r\n          { name: 'Dev ', max: 52000 },\r\n          { name: 'Sales ', max: 25000 }\r\n        ],\r\n        radius: 120,\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.rgbaColor(utils.getGrays()['700'])\r\n          }\r\n        }\r\n      },\r\n\r\n      series: [\r\n        {\r\n          type: 'radar',\r\n          data: [\r\n            {\r\n              value: [4200, 3000, 20000, 35000, 50000, 18000],\r\n              name: 'Data A',\r\n              itemStyle: {\r\n                color: utils.getColor('primary')\r\n              }\r\n            },\r\n            {\r\n              value: [5000, 14000, 28000, 26000, 42000, 21000],\r\n              name: 'Data B',\r\n              itemStyle: {\r\n                color: utils.getColor('warning')\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsRadarChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Pie Chart                              */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsRadarCustomizedChartInit = () => {\r\n  const $radarChartEl = document.querySelector('.echart-radar-customized-chart');\r\n  function getFormatter(params) {\r\n    const indicators = [\r\n      ['Marketing', 'Sales', 'Dev', 'Support', 'Tech', 'Admin'],\r\n      ['Language', 'Math', 'English', 'Physics', 'Chemistry', 'Biology']\r\n    ];\r\n    const num = params.seriesIndex;\r\n    return `<strong > ${params.name} </strong>\r\n    <div class=\"fs--1 text-600\">\r\n      <strong >${indicators[params.seriesIndex][0]}</strong>: ${params.value[0]}  <br>\r\n      <strong>${indicators[num][1]}</strong>: ${params.value[1]}  <br>\r\n      <strong>${indicators[num][2]}</strong>: ${params.value[2]}  <br>\r\n      <strong>${indicators[num][3]}</strong>: ${params.value[3]}  <br>\r\n      <strong>${indicators[num][4]}</strong>: ${params.value[4]}  <br>\r\n      <strong>${indicators[num][5]}</strong>: ${params.value[5]}  <br>\r\n    </div>`;\r\n  }\r\n\r\n  if ($radarChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($radarChartEl, 'options');\r\n    const chart = window.echarts.init($radarChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      legend: {\r\n        orient: 'vertical',\r\n        left: 'left',\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        }\r\n      },\r\n      tooltip: {\r\n        trigger: 'item',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        },\r\n        formatter: getFormatter\r\n      },\r\n\r\n      radar: [\r\n        {\r\n          radius: window.innerWidth < 576 ? 90 : 120,\r\n          startAngle: 90,\r\n          splitNumber: 4,\r\n          shape: 'circle',\r\n          center: window.innerWidth < 992 ? ['50%', '30%'] : ['25%', '50%'],\r\n          indicator: [\r\n            { name: 'Admin', max: 6500 },\r\n            { name: 'Tech', max: 16000 },\r\n            { name: 'Support', max: 30000 },\r\n            { name: 'Dev', max: 38000 },\r\n            { name: 'Sales', max: 52000 },\r\n            { name: 'Marketing', max: 25000 }\r\n          ],\r\n          name: {\r\n            formatter: '{value}',\r\n            textStyle: {\r\n              color: utils.getGrays()['700']\r\n            }\r\n          },\r\n          splitLine: {\r\n            lineStyle: {\r\n              color: utils.rgbaColor(utils.getGrays()['700'])\r\n            }\r\n          }\r\n        },\r\n\r\n        {\r\n          indicator: [\r\n            { text: 'Language', max: 150 },\r\n            { text: 'Math', max: 150 },\r\n            { text: 'English', max: 150 },\r\n            { text: 'physics', max: 120 },\r\n            { text: 'Chemistry', max: 108 },\r\n            { text: 'Biology', max: 72 }\r\n          ],\r\n          radius: window.innerWidth < 576 ? 90 : 120,\r\n          center: window.innerWidth < 992 ? ['50%', '75%'] : ['75%', '50%'],\r\n          splitLine: {\r\n            lineStyle: {\r\n              color: utils.rgbaColor(utils.getGrays()['700'])\r\n            }\r\n          },\r\n          name: {\r\n            textStyle: {\r\n              color: utils.rgbaColor(utils.getGrays()['1000']),\r\n              backgroundColor: utils.rgbaColor(utils.getGrays()['100']),\r\n              borderRadius: 3,\r\n              padding: [3, 5]\r\n            }\r\n          }\r\n        }\r\n      ],\r\n\r\n      series: [\r\n        {\r\n          type: 'radar',\r\n          data: [\r\n            {\r\n              value: [5200, 4000, 20000, 30000, 20000, 18000],\r\n              name: 'Data A',\r\n              itemStyle: {\r\n                color: utils.getColor('info')\r\n              },\r\n              areaStyle: {\r\n                color: utils.rgbaColor(utils.getColors()['info'], 0.3)\r\n              }\r\n            },\r\n            {\r\n              value: [5000, 12000, 28000, 26000, 32000, 21000],\r\n              name: 'Data B',\r\n              itemStyle: {\r\n                color: utils.getColor('success')\r\n              },\r\n              areaStyle: {\r\n                color: utils.rgbaColor(utils.getColors()['success'], 0.3)\r\n              }\r\n            }\r\n          ]\r\n        },\r\n\r\n        {\r\n          type: 'radar',\r\n          radarIndex: 1,\r\n          data: [\r\n            {\r\n              value: [130, 110, 130, 100, 99, 70],\r\n              name: 'Data C',\r\n              symbol: 'rect',\r\n              symbolSize: 12,\r\n              lineStyle: {\r\n                type: 'dashed'\r\n              },\r\n              itemStyle: {\r\n                color: utils.getColor('warning')\r\n              },\r\n              areaStyle: {\r\n                color: utils.rgbaColor(utils.getColors()['warning'], 0.3)\r\n              },\r\n              label: {\r\n                show: true,\r\n                formatter: function (params) {\r\n                  return params.value;\r\n                },\r\n                color: utils.getGrays()['700']\r\n              }\r\n            },\r\n            {\r\n              value: [100, 93, 50, 90, 70, 60],\r\n              name: 'Data D',\r\n              itemStyle: {\r\n                color: utils.getColor('danger')\r\n              },\r\n              areaStyle: {\r\n                color: utils.rgbaColor(utils.getColors()['danger'], 0.3)\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n    //- set chart position on Window resize\r\n    utils.resize(() => {\r\n      if (window.innerWidth < 992) {\r\n        chart.setOption({\r\n          radar: [\r\n            {\r\n              center: ['50%', '30%']\r\n            },\r\n            {\r\n              center: ['50%', '75%']\r\n            }\r\n          ]\r\n        });\r\n      } else {\r\n        chart.setOption({\r\n          radar: [\r\n            {\r\n              center: ['25%', '50%']\r\n            },\r\n            {\r\n              center: ['75%', '50%']\r\n            }\r\n          ]\r\n        });\r\n      }\r\n\r\n      if (window.innerWidth < 576) {\r\n        chart.setOption({\r\n          radar: [\r\n            {\r\n              radius: 90\r\n            },\r\n            {\r\n              radius: 90\r\n            }\r\n          ]\r\n        });\r\n      } else {\r\n        chart.setOption({\r\n          radar: [\r\n            {\r\n              radius: 120\r\n            },\r\n            {\r\n              radius: 120\r\n            }\r\n          ]\r\n        });\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport default echartsRadarCustomizedChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                      Echarts Radar Multiple Chart                          */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsRadarMultipleChartInit = () => {\r\n  const $radarChartEl = document.querySelector('.echart-radar-multiple-chart');\r\n\r\n  if ($radarChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($radarChartEl, 'options');\r\n    const chart = window.echarts.init($radarChartEl);\r\n\r\n    const months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December'\r\n    ];\r\n\r\n    const getCenter = () => {\r\n      if (window.innerWidth < 1540 && window.innerWidth > 992) {\r\n        return [\r\n          ['25%', '40%'],\r\n          ['50%', '75%'],\r\n          ['75%', '40%']\r\n        ];\r\n      } else if (window.innerWidth < 992) {\r\n        return [\r\n          ['50%', '20%'],\r\n          ['50%', '50%'],\r\n          ['50%', '80%']\r\n        ];\r\n      } else {\r\n        return [\r\n          ['15%', '50%'],\r\n          ['50%', '50%'],\r\n          ['85%', '50%']\r\n        ];\r\n      }\r\n    };\r\n\r\n    const getDefaultOptions = () => ({\r\n      legend: {\r\n        left: 'left',\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        }\r\n      },\r\n      tooltip: {\r\n        trigger: 'item',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        axisPointer: {\r\n          type: 'none'\r\n        }\r\n      },\r\n\r\n      radar: [\r\n        {\r\n          indicator: [\r\n            { text: 'Brand', max: 100 },\r\n            { text: 'content', max: 100 },\r\n            { text: 'Usability', max: 100 },\r\n            { text: 'Features', max: 100 }\r\n          ],\r\n          center: getCenter()[0],\r\n          radius: 85,\r\n          splitLine: {\r\n            lineStyle: {\r\n              color: utils.rgbaColor(utils.getGrays()['700'])\r\n            }\r\n          }\r\n        },\r\n        {\r\n          indicator: [\r\n            { text: 'Exterior', max: 100 },\r\n            { text: 'Take pictures', max: 100 },\r\n            { text: 'system', max: 100 },\r\n            { text: 'performance', max: 100 },\r\n            { text: 'screen', max: 100 }\r\n          ],\r\n          radius: 85,\r\n          center: getCenter()[1],\r\n          splitLine: {\r\n            lineStyle: {\r\n              color: utils.rgbaColor(utils.getGrays()['700'])\r\n            }\r\n          }\r\n        },\r\n        {\r\n          indicator: months.map(month => ({\r\n            text: month,\r\n            max: 100\r\n          })),\r\n          center: getCenter()[2],\r\n          radius: 85,\r\n          splitLine: {\r\n            lineStyle: {\r\n              color: utils.rgbaColor(utils.getGrays()['700'])\r\n            }\r\n          }\r\n        }\r\n      ],\r\n\r\n      series: [\r\n        {\r\n          type: 'radar',\r\n          tooltip: {\r\n            trigger: 'item'\r\n          },\r\n          areaStyle: {\r\n            color: utils.rgbaColor(utils.getColors()['info'], 0.5)\r\n          },\r\n          data: [\r\n            {\r\n              value: [60, 73, 85, 40],\r\n              name: 'A software',\r\n              itemStyle: {\r\n                color: utils.getColor('info')\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radar',\r\n          radarIndex: 1,\r\n          data: [\r\n            {\r\n              value: [85, 90, 90, 95, 95],\r\n              name: 'A staple mobile phone',\r\n              itemStyle: {\r\n                color: utils.rgbaColor(utils.getColors()['primary'], 0.8)\r\n              },\r\n              areaStyle: {\r\n                color: utils.rgbaColor(utils.getColors()['primary'], 0.3)\r\n              }\r\n            },\r\n            {\r\n              value: [95, 80, 75, 90, 93],\r\n              name: 'A fruit phone',\r\n              itemStyle: {\r\n                color: utils.getColor('success')\r\n              },\r\n              areaStyle: {\r\n                color: utils.rgbaColor(utils.getColors()['success'], 0.3)\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          type: 'radar',\r\n          radarIndex: 2,\r\n          areaStyle: {},\r\n          tooltip: {\r\n            show: false\r\n          },\r\n          data: [\r\n            {\r\n              name: 'Precipitation',\r\n              value: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 75.6, 82.2, 48.7, 18.8, 6.0, 2.3],\r\n              itemStyle: {\r\n                color: utils.getColor('primary')\r\n              },\r\n              areaStyle: {\r\n                color: utils.rgbaColor(utils.getColors()['primary'], 0.5)\r\n              }\r\n            },\r\n            {\r\n              name: 'Evaporation',\r\n              value: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 35.6, 62.2, 32.6, 20.0, 6.4, 3.3],\r\n              itemStyle: {\r\n                color: utils.getColor('warning')\r\n              },\r\n              areaStyle: {\r\n                color: utils.rgbaColor(utils.getColors()['warning'], 0.5)\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n\r\n    // - set chart position on Window resize\r\n    utils.resize(() => {\r\n      chart.setOption({\r\n        radar: getCenter().map(item => ({\r\n          center: item\r\n        }))\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nexport default echartsRadarMultipleChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                        Echarts Scatter Basic Chart                         */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsScatterBasicChartInit = () => {\r\n  const $basicScatterChartEl = document.querySelector('.echart-basic-scatter-chart-example');\r\n\r\n  if ($basicScatterChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($basicScatterChartEl, 'options');\r\n    const chart = window.echarts.init($basicScatterChartEl);\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'item',\r\n        axisPointer: {\r\n          type: 'none'\r\n        },\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0\r\n      },\r\n      xAxis: {\r\n        axisLabel: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        splitLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        axisLabel: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n        splitLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          // symbolSize: val => val[2] * 2,\r\n          data: [\r\n            [10.0, 8.04],\r\n            [8.07, 6.95],\r\n            [13.0, 7.58],\r\n            [9.05, 8.81],\r\n            [11.0, 8.33],\r\n            [14.0, 7.66],\r\n            [13.4, 6.81],\r\n            [10.0, 6.33],\r\n            [14.0, 8.96],\r\n            [12.5, 6.82],\r\n            [9.15, 7.2],\r\n            [11.5, 7.2],\r\n            [3.03, 4.23],\r\n            [12.2, 7.83],\r\n            [2.02, 4.47],\r\n            [1.05, 3.33],\r\n            [4.05, 4.96],\r\n            [6.03, 7.24],\r\n            [12.0, 6.26],\r\n            [12.0, 8.84],\r\n            [7.08, 5.82],\r\n            [5.02, 5.68]\r\n          ],\r\n          type: 'scatter',\r\n          itemStyle: {\r\n            color: utils.getColor('danger')\r\n          }\r\n        }\r\n      ],\r\n      grid: {\r\n        right: 8,\r\n        left: 5,\r\n        bottom: 5,\r\n        top: 8,\r\n        containLabel: true\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsScatterBasicChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                      Echarts Scatter Quartet Chart                         */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsScatterQuartetChartInit = () => {\r\n  const $scatterQuartetChartEl = document.querySelector('.echart-scatter-quartet-chart-example');\r\n\r\n  if ($scatterQuartetChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($scatterQuartetChartEl, 'options');\r\n    const chart = window.echarts.init($scatterQuartetChartEl);\r\n\r\n    const dataAll = [\r\n      [\r\n        [10.0, 8.04],\r\n        [8.0, 6.95],\r\n        [13.0, 7.58],\r\n        [9.0, 8.81],\r\n        [11.0, 8.33],\r\n        [14.0, 9.96],\r\n        [6.0, 7.24],\r\n        [4.0, 4.26],\r\n        [12.0, 10.84],\r\n        [7.0, 4.82],\r\n        [5.0, 5.68]\r\n      ],\r\n      [\r\n        [10.0, 9.14],\r\n        [8.0, 8.14],\r\n        [13.0, 8.74],\r\n        [9.0, 8.77],\r\n        [11.0, 9.26],\r\n        [14.0, 8.1],\r\n        [6.0, 6.13],\r\n        [4.0, 3.1],\r\n        [12.0, 9.13],\r\n        [7.0, 7.26],\r\n        [5.0, 4.74]\r\n      ],\r\n      [\r\n        [10.0, 7.46],\r\n        [8.0, 6.77],\r\n        [13.0, 12.74],\r\n        [9.0, 7.11],\r\n        [11.0, 7.81],\r\n        [14.0, 8.84],\r\n        [6.0, 6.08],\r\n        [4.0, 5.39],\r\n        [12.0, 8.15],\r\n        [7.0, 6.42],\r\n        [5.0, 5.73]\r\n      ],\r\n      [\r\n        [8.0, 6.58],\r\n        [8.0, 5.76],\r\n        [8.0, 7.71],\r\n        [8.0, 8.84],\r\n        [8.0, 8.47],\r\n        [8.0, 7.04],\r\n        [8.0, 5.25],\r\n        [19.0, 12.5],\r\n        [8.0, 5.56],\r\n        [8.0, 7.91],\r\n        [8.0, 6.89]\r\n      ]\r\n    ];\r\n\r\n    const xAxis = () => ({\r\n      axisLabel: {\r\n        color: utils.getGrays()['600']\r\n      },\r\n      axisLine: {\r\n        show: true,\r\n        lineStyle: {\r\n          color: utils.getGrays()['300']\r\n        }\r\n      },\r\n\r\n      splitLine: {\r\n        show: true,\r\n        lineStyle: {\r\n          color: utils.getGrays()['200']\r\n        }\r\n      }\r\n    });\r\n\r\n    const yAxis = () => ({\r\n      axisLabel: {\r\n        color: utils.getGrays()['600']\r\n      },\r\n      splitLine: {\r\n        show: true,\r\n        lineStyle: {\r\n          color: utils.getGrays()['200']\r\n        }\r\n      },\r\n\r\n      axisLine: {\r\n        show: true,\r\n        lineStyle: {\r\n          color: utils.getGrays()['300']\r\n        }\r\n      }\r\n    });\r\n\r\n    const markLineOpt = {\r\n      animation: false,\r\n      label: {\r\n        formatter: 'y = 0.5 * x + 3',\r\n        align: 'right',\r\n        color: utils.getGrays()['600'],\r\n        fontWeight: 600\r\n      },\r\n      lineStyle: {\r\n        type: 'solid'\r\n      },\r\n      tooltip: {\r\n        formatter: 'y = 0.5 * x + 3'\r\n      },\r\n      data: [\r\n        [\r\n          {\r\n            coord: [0, 3],\r\n            symbol: 'none'\r\n          },\r\n          {\r\n            coord: [20, 13],\r\n            symbol: 'none'\r\n          }\r\n        ]\r\n      ]\r\n    };\r\n    const gridMdUp = [\r\n      { left: '7%', top: '10%', width: '38%', height: '38%' },\r\n      { right: '7%', top: '10%', width: '38%', height: '38%' },\r\n      { left: '7%', bottom: '7%', width: '38%', height: '38%' },\r\n      { right: '7%', bottom: '7%', width: '38%', height: '38%' }\r\n    ];\r\n\r\n    const gridMdDown = [\r\n      { left: 6, right: 7, top: '4%', height: '20%' },\r\n      { left: 6, right: 7, top: '29%', height: '20%' },\r\n      { left: 6, right: 7, bottom: '26%', height: '20%' },\r\n      { left: 6, right: 7, bottom: 25, height: '20%' }\r\n    ];\r\n\r\n    const getDefaultOptions = () => ({\r\n      color: [\r\n        utils.getColor('primary'),\r\n        utils.getColor('success'),\r\n        utils.getColor('warning'),\r\n        utils.getColor('danger')\r\n      ],\r\n      tooltip: {\r\n        trigger: 'item',\r\n        axisPointer: {\r\n          type: 'none'\r\n        },\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        formatter: 'Group {a}: ({c})'\r\n      },\r\n      title: {\r\n        text: \"Anscombe's quartet\",\r\n        left: 'center',\r\n        top: 0,\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        }\r\n      },\r\n      grid: window.innerWidth < 768 ? gridMdDown : gridMdUp,\r\n      xAxis: [\r\n        { gridIndex: 0, min: 0, max: 20, ...xAxis() },\r\n        { gridIndex: 1, min: 0, max: 20, ...xAxis() },\r\n        { gridIndex: 2, min: 0, max: 20, ...xAxis() },\r\n        { gridIndex: 3, min: 0, max: 20, ...xAxis() }\r\n      ],\r\n      yAxis: [\r\n        { gridIndex: 0, min: 0, max: 15, ...yAxis() },\r\n        { gridIndex: 1, min: 0, max: 15, ...yAxis() },\r\n        { gridIndex: 2, min: 0, max: 15, ...yAxis() },\r\n        { gridIndex: 3, min: 0, max: 15, ...yAxis() }\r\n      ],\r\n      series: [\r\n        {\r\n          name: 'I',\r\n          type: 'scatter',\r\n          xAxisIndex: 0,\r\n          yAxisIndex: 0,\r\n          data: dataAll[0],\r\n          markLine: markLineOpt\r\n        },\r\n        {\r\n          name: 'II',\r\n          type: 'scatter',\r\n          xAxisIndex: 1,\r\n          yAxisIndex: 1,\r\n          data: dataAll[1],\r\n          markLine: markLineOpt\r\n        },\r\n        {\r\n          name: 'III',\r\n          type: 'scatter',\r\n          xAxisIndex: 2,\r\n          yAxisIndex: 2,\r\n          data: dataAll[2],\r\n          markLine: markLineOpt\r\n        },\r\n        {\r\n          name: 'IV',\r\n          type: 'scatter',\r\n          xAxisIndex: 3,\r\n          yAxisIndex: 3,\r\n          data: dataAll[3],\r\n          markLine: markLineOpt\r\n        }\r\n      ]\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n\r\n    utils.resize(() => {\r\n      if (window.innerWidth < 768) {\r\n        chart.setOption({\r\n          grid: gridMdDown\r\n        });\r\n      } else {\r\n        chart.setOption({\r\n          grid: gridMdUp\r\n        });\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport default echartsScatterQuartetChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                   Echarts Scatter singlr Axis Chart                        */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsScatterSingleAxisChartInit = () => {\r\n  const $scatterSingleAxisChartEl = document.querySelector(\r\n    '.echart-scatter-single-axis-chart-example'\r\n  );\r\n\r\n  if ($scatterSingleAxisChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($scatterSingleAxisChartEl, 'options');\r\n    const chart = window.echarts.init($scatterSingleAxisChartEl);\r\n\r\n    const hours = [\r\n      '12am',\r\n      '1am',\r\n      '2am',\r\n      '3am',\r\n      '4am',\r\n      '5am',\r\n      '6am',\r\n      '7am',\r\n      '8am',\r\n      '9am',\r\n      '10am',\r\n      '11am',\r\n      '12pm',\r\n      '1pm',\r\n      '2pm',\r\n      '3pm',\r\n      '4pm',\r\n      '5pm',\r\n      '6pm',\r\n      '7pm',\r\n      '8pm',\r\n      '9pm',\r\n      '10pm',\r\n      '11pm'\r\n    ];\r\n\r\n    const days = ['Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday', 'Sunday'];\r\n\r\n    const data = [];\r\n    for (let i = 0; i < 7; i += 1) {\r\n      for (let j = 0; j < 24; j += 1) {\r\n        data.push([j, i, utils.getRandomNumber(0, 10)]);\r\n      }\r\n    }\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'item',\r\n        axisPointer: {\r\n          type: 'none'\r\n        },\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        position: 'top',\r\n        formatter: function (params) {\r\n          return `\r\n            ${days[params.value[1]]} <br/>\r\n            ${hours[params.value[0]]} : ${params.value[2]}\r\n          `;\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: hours,\r\n        boundaryGap: false,\r\n        splitLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        axisLine: {\r\n          show: false\r\n        },\r\n        axisTick: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['600']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'category',\r\n        data: days,\r\n        axisLine: {\r\n          show: false\r\n        },\r\n        axisTick: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['600']\r\n          }\r\n        },\r\n        axisLabel: {\r\n          margin: 15\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Punch Card',\r\n          type: 'scatter',\r\n          symbolSize: val => val[2] * 2,\r\n          data: data,\r\n          animationDelay: function (idx) {\r\n            return idx * 5;\r\n          },\r\n          itemStyle: {\r\n            color: utils.getColor('primary')\r\n          }\r\n        }\r\n      ],\r\n      grid: {\r\n        right: 12,\r\n        left: 5,\r\n        bottom: 5,\r\n        top: 5,\r\n        containLabel: true\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsScatterSingleAxisChartInit;\r\n","import utils from '../../../utils';\r\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                    Echarts Stacked Area  Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsStackedAreaChartInit = () => {\r\n  const $stackedAreaChartEl = document.querySelector('.echart-stacked-area-chart-example');\r\n\r\n  if ($stackedAreaChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($stackedAreaChartEl, 'options');\r\n    const chart = window.echarts.init($stackedAreaChartEl);\r\n\r\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        position(pos, params, dom, rect, size) {\r\n          return getPosition(pos, params, dom, rect, size);\r\n        },\r\n        axisPointer: {\r\n          type: 'none'\r\n        },\r\n        formatter: tooltipFormatter\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: days,\r\n        boundaryGap: false,\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          color: utils.getGrays()['400'],\r\n          margin: 15,\r\n          formatter: value => value.substring(0, 3)\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        boundaryGap: false,\r\n        axisLabel: {\r\n          show: true,\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        axisTick: { show: false },\r\n        axisLine: { show: false }\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Matcha Latte',\r\n          type: 'line',\r\n          symbolSize: 10,\r\n          stack: 'product',\r\n          data: [120, 132, 101, 134, 90, 230, 210],\r\n          areaStyle: {\r\n            color: utils.rgbaColor(utils.getColor('info'), 0.3)\r\n          },\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('info'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('info')\r\n          },\r\n          symbol: 'circle'\r\n        },\r\n        {\r\n          name: 'Milk Tea',\r\n          type: 'line',\r\n          symbolSize: 10,\r\n          stack: 'product',\r\n          data: [220, 182, 191, 234, 290, 330, 310],\r\n          areaStyle: {\r\n            color: utils.rgbaColor(utils.getColor('success'), 0.3)\r\n          },\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('success'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('success')\r\n          },\r\n          symbol: 'circle'\r\n        },\r\n        {\r\n          name: 'Cheese Cocoa',\r\n          type: 'line',\r\n          symbolSize: 10,\r\n          stack: 'product',\r\n          data: [150, 232, 201, 154, 190, 330, 410],\r\n          areaStyle: {\r\n            color: utils.rgbaColor(utils.getColor('danger'), 0.3)\r\n          },\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('danger'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('danger')\r\n          },\r\n          symbol: 'circle'\r\n        },\r\n        {\r\n          name: 'Cheese Brownie',\r\n          type: 'line',\r\n          symbolSize: 10,\r\n          stack: 'product',\r\n          data: [320, 332, 301, 334, 390, 330, 320],\r\n          areaStyle: {\r\n            color: utils.rgbaColor(utils.getColor('warning'), 0.3)\r\n          },\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('warning'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('warning')\r\n          },\r\n          symbol: 'circle'\r\n        },\r\n        {\r\n          name: 'Matcha Cocoa',\r\n          type: 'line',\r\n          symbolSize: 10,\r\n          stack: 'product',\r\n          data: [820, 932, 901, 934, 1290, 1330, 1320],\r\n          areaStyle: {\r\n            color: utils.rgbaColor(utils.getColor('primary'), 0.3)\r\n          },\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('primary'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('primary')\r\n          },\r\n          symbol: 'circle'\r\n        }\r\n      ],\r\n      grid: { right: 10, left: 5, bottom: 5, top: 8, containLabel: true }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsStackedAreaChartInit;\r\n","import utils from '../../../utils';\r\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Bar Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsHorizontalStackedChartInit = () => {\r\n  const $horizontalStackChartEl = document.querySelector(\r\n    '.echart-horizontal-stacked-chart-example'\r\n  );\r\n\r\n  if ($horizontalStackChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($horizontalStackChartEl, 'options');\r\n    const chart = window.echarts.init($horizontalStackChartEl);\r\n\r\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\n    const getDefaultOptions = () => ({\r\n      color: [\r\n        utils.getColor('info'),\r\n        utils.getColor('danger'),\r\n        utils.getColor('warning'),\r\n        utils.getColor('success'),\r\n        utils.getColor('primary')\r\n      ],\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          type: 'shadow'\r\n        },\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        formatter: tooltipFormatter\r\n      },\r\n      toolbox: {\r\n        feature: {\r\n          magicType: {\r\n            type: ['stack', 'tiled']\r\n          }\r\n        },\r\n        right: 0\r\n      },\r\n      legend: {\r\n        data: ['Direct', 'Mail Ad', 'Affiliate Ad', 'Video Ad', 'Search Engine'],\r\n        textStyle: {\r\n          color: utils.getGrays()['600']\r\n        },\r\n        left: 0\r\n      },\r\n      xAxis: {\r\n        type: 'value',\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          color: utils.getGrays()['500']\r\n        },\r\n        splitLine: {\r\n          lineStyle: {\r\n            show: true,\r\n            color: utils.getGrays()['200']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'category',\r\n        data: days,\r\n        axisLine: {\r\n          lineStyle: {\r\n            show: true,\r\n            color: utils.getGrays()['300']\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          color: utils.getGrays()['500'],\r\n          formatter: value => value.substring(0, 3)\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Direct',\r\n          type: 'bar',\r\n          stack: 'total',\r\n          label: {\r\n            show: true,\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          emphasis: {\r\n            focus: 'series'\r\n          },\r\n          data: [320, 302, 301, 334, 390, 330, 320]\r\n        },\r\n        {\r\n          name: 'Mail Ad',\r\n          type: 'bar',\r\n          stack: 'total',\r\n          label: {\r\n            show: true\r\n          },\r\n          emphasis: {\r\n            focus: 'series'\r\n          },\r\n          data: [220, 188, 301, 250, 190, 230, 210]\r\n        },\r\n        {\r\n          name: 'Affiliate Ad',\r\n          type: 'bar',\r\n          stack: 'total',\r\n          label: {\r\n            show: true,\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          emphasis: {\r\n            focus: 'series'\r\n          },\r\n          data: [220, 182, 191, 234, 290, 330, 310]\r\n        },\r\n        {\r\n          name: 'Video Ad',\r\n          type: 'bar',\r\n          stack: 'total',\r\n          label: {\r\n            show: true,\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          emphasis: {\r\n            focus: 'series'\r\n          },\r\n          data: [150, 212, 201, 154, 190, 330, 410]\r\n        },\r\n        {\r\n          name: 'Search Engine',\r\n          type: 'bar',\r\n          stack: 'total',\r\n          label: {\r\n            show: true\r\n          },\r\n          emphasis: {\r\n            focus: 'series'\r\n          },\r\n          data: [820, 832, 901, 934, 1290, 1330, 1320]\r\n        }\r\n      ],\r\n      grid: {\r\n        right: 15,\r\n        left: 5,\r\n        bottom: 5,\r\n        top: '15%',\r\n        containLabel: true\r\n      }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsHorizontalStackedChartInit;\r\n","import utils from '../../../utils';\r\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                     Echarts Stacked Line Chart                             */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsStackedLineChartInit = () => {\r\n  const $stackedLineChartEl = document.querySelector('.echart-stacked-line-chart-example');\r\n\r\n  if ($stackedLineChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($stackedLineChartEl, 'options');\r\n    const chart = window.echarts.init($stackedLineChartEl);\r\n\r\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\n    const getDefaultOptions = () => ({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        position(pos, params, dom, rect, size) {\r\n          return getPosition(pos, params, dom, rect, size);\r\n        },\r\n        axisPointer: {\r\n          type: 'none'\r\n        },\r\n        formatter: tooltipFormatter\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: days,\r\n        boundaryGap: false,\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          color: utils.getGrays()['400'],\r\n          margin: 15,\r\n          formatter: value => value.substring(0, 3)\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['200'],\r\n            type: 'dashed'\r\n          }\r\n        },\r\n        boundaryGap: false,\r\n        axisLabel: {\r\n          show: true,\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        axisTick: { show: false },\r\n        axisLine: { show: false }\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Matcha Latte',\r\n          type: 'line',\r\n          symbolSize: 6,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('info'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('info')\r\n          },\r\n          symbol: 'circle',\r\n          stack: 'product',\r\n          data: [120, 132, 101, 134, 90, 230, 210]\r\n        },\r\n        {\r\n          name: 'Milk Tea',\r\n          type: 'line',\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('success'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('success')\r\n          },\r\n          symbol: 'circle',\r\n          stack: 'product',\r\n          data: [220, 182, 191, 234, 290, 330, 310]\r\n        },\r\n        {\r\n          name: 'Cheese Cocoa',\r\n          type: 'line',\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('danger'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('danger')\r\n          },\r\n          symbol: 'circle',\r\n          stack: 'product',\r\n          data: [150, 232, 201, 154, 190, 330, 410]\r\n        },\r\n        {\r\n          name: 'Cheese Brownie',\r\n          type: 'line',\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('warning'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('warning')\r\n          },\r\n          symbol: 'circle',\r\n          stack: 'product',\r\n          data: [320, 332, 301, 334, 390, 330, 320]\r\n        },\r\n        {\r\n          name: 'Matcha Cocoa',\r\n          type: 'line',\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('primary'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('primary')\r\n          },\r\n          symbol: 'circle',\r\n          stack: 'product',\r\n          data: [820, 932, 901, 934, 1290, 1330, 1320]\r\n        }\r\n      ],\r\n      grid: { right: 10, left: 5, bottom: 5, top: 8, containLabel: true }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsStackedLineChartInit;\r\n","import utils from '../../../utils';\r\nimport { getPosition,echartSetOption,tooltipFormatter} from '../echarts-utils';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                             Echarts Step Line Chart                        */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst echartsStepLineChartInit = () => {\r\n  const $stepLineChartEl = document.querySelector(\r\n    '.echart-step-line-chart-example'\r\n  );\r\n\r\n  if ($stepLineChartEl) {\r\n    // Get options from data attribute\r\n    const userOptions = utils.getData($stepLineChartEl, 'options');\r\n    const chart = window.echarts.init($stepLineChartEl);\r\n\r\n    const days = [\r\n      'Monday',\r\n      'Tuesday',\r\n      'Wednesday',\r\n      'Thursday',\r\n      'Friday',\r\n      'Saturday',\r\n      'Sunday'\r\n    ];\r\n\r\n    const getDefaultOptions = () => ({\r\n      color: [\r\n        utils.getColor('danger'),\r\n        utils.getColor('warning'),\r\n        utils.getColor('primary')\r\n      ],\r\n      legend: {\r\n        data: [\r\n          {\r\n            name: 'Max',\r\n            textStyle: {\r\n              color: utils.getGrays()['600']\r\n            }\r\n          },\r\n          {\r\n            name: 'Min',\r\n            textStyle: {\r\n              color: utils.getGrays()['600']\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        padding: [7, 10],\r\n        backgroundColor: utils.getGrays()['100'],\r\n        borderColor: utils.getGrays()['300'],\r\n        textStyle: { color: utils.getColors().dark },\r\n        borderWidth: 1,\r\n        transitionDuration: 0,\r\n        formatter: tooltipFormatter,\r\n        position(pos, params, dom, rect, size) {\r\n          return getPosition(pos, params, dom, rect, size);\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: days,\r\n        boundaryGap: false,\r\n        axisLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300'],\r\n            type: 'solid'\r\n          }\r\n        },\r\n        axisTick: { show: false },\r\n        axisLabel: {\r\n          formatter: value => value.substring(0, 3),\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        },\r\n        axisPointer: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['300']\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        splitLine: {\r\n          lineStyle: {\r\n            color: utils.getGrays()['200']\r\n          }\r\n        },\r\n        boundaryGap: false,\r\n        axisLabel: {\r\n          show: true,\r\n          color: utils.getGrays()['400'],\r\n          margin: 15\r\n        },\r\n        axisTick: { show: false },\r\n        axisLine: { show: false }\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Step Start',\r\n          type: 'line',\r\n          step: 'start',\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('primary'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('primary')\r\n          },\r\n          symbol: 'circle',\r\n          data: [120, 132, 101, 134, 90, 230, 210]\r\n        },\r\n        {\r\n          name: 'Step Middle',\r\n          type: 'line',\r\n          step: 'middle',\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('warning'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('warning')\r\n          },\r\n          symbol: 'circle',\r\n          data: [220, 282, 201, 234, 290, 430, 410]\r\n        },\r\n        {\r\n          name: 'Step End',\r\n          type: 'line',\r\n          step: 'end',\r\n          symbolSize: 10,\r\n          itemStyle: {\r\n            color: utils.getGrays().white,\r\n            borderColor: utils.getColor('danger'),\r\n            borderWidth: 2\r\n          },\r\n          lineStyle: {\r\n            color: utils.getColor('danger')\r\n          },\r\n          symbol: 'circle',\r\n          data: [450, 432, 401, 454, 590, 530, 510]\r\n        }\r\n      ],\r\n      grid: { right: '3%', left: '8%', bottom: '10%', top: '5%' }\r\n    });\r\n\r\n    echartSetOption(chart, userOptions, getDefaultOptions);\r\n  }\r\n};\r\n\r\nexport default echartsStepLineChartInit;\r\n","import { docReady } from './utils';\r\nimport echartsLineChartInit from './charts/echarts/examples/basic-line-chart';\r\nimport echartsPieChartInit from './charts/echarts/examples/pie-chart';\r\nimport echartsBasicBarChartInit from './charts/echarts/examples/basic-bar-chart';\r\nimport echartsDoughnutChartInit from './charts/echarts/examples/doughnut-chart';\r\nimport echartsLineAreaChartInit from './charts/echarts/examples/line-area-chart';\r\nimport echartsStackedLineChartInit from './charts/echarts/examples/stacked-line-chart';\r\nimport echartsStackedAreaChartInit from './charts/echarts/examples/stacked-area-chart';\r\nimport echartsLineMarkerChartInit from './charts/echarts/examples/line-marker-chart';\r\nimport echartsAreaPiecesChartInit from './charts/echarts/examples/area-pieces-chart';\r\nimport echartsLineRaceChartInit from './charts/echarts/examples/line-race-chart';\r\nimport echartsStepLineChartInit from './charts/echarts/examples/step-line-chart';\r\nimport echartsLineGradientChartInit from './charts/echarts/examples/line-gradient-chart';\r\nimport echartsDynamicLineChartInit from './charts/echarts/examples/dynamic-line-chart';\r\nimport echartsHorizontalBarChartInit from './charts/echarts/examples/horizontal-bar-chart';\r\nimport echartsBarNegativeChartInit from './charts/echarts/examples/bar-negative-chart';\r\nimport echartsBarSeriesChartInit from './charts/echarts/examples/bar-series-chart';\r\nimport echartsWaterFallChartInit from './charts/echarts/examples/bar-waterfall-chart';\r\nimport echartsHorizontalStackedChartInit from './charts/echarts/examples/stacked-horizontal-bar-chart';\r\nimport echartsBarRaceChartInit from './charts/echarts/examples/bar-race-chart';\r\nimport echartsGradientBarChartInit from './charts/echarts/examples/gradient-bar-chart';\r\nimport echartsBarLineChartInit from './charts/echarts/examples/bar-line-mixed-chart';\r\nimport echartsBasicCandlestickChartInit from './charts/echarts/examples/basic-candlestick-chart';\r\nimport echartsCandlestickMixedChartInit from './charts/echarts/examples/candle-stick-mixed-chart';\r\nimport echartsUsaMapInit from './charts/echarts/examples/map-usa';\r\nimport echartsScatterBasicChartInit from './charts/echarts/examples/scatter-basic-chart';\r\nimport echartsBubbleChartInit from './charts/echarts/examples/bubble-chart';\r\nimport echartsScatterQuartetChartInit from './charts/echarts/examples/scatter-quartet';\r\nimport echartsScatterSingleAxisChartInit from './charts/echarts/examples/scatter-single-axis-chart';\r\nimport echartsBasicGaugeChartInit from './charts/echarts/examples/basic-gauge-chart';\r\nimport echartsGaugeProgressChartInit from './charts/echarts/examples/gauge-progress-chart';\r\nimport echartsGaugeRingChartInit from './charts/echarts/examples/gauge-ring-chart';\r\nimport echartsGaugeMultiRingChartInit from './charts/echarts/examples/gauge-multi-ring-chart';\r\nimport echartsGaugeMultiTitleChartInit from './charts/echarts/examples/gauge-multi-title-chart';\r\nimport echartsGaugeGradeChartInit from './charts/echarts/examples/gauge-grade-chart';\r\nimport echartsLineLogChartInit from './charts/echarts/examples/line-log-chart';\r\nimport echartsLineShareDatasetChartInit from './charts/echarts/examples/line-share-dataset-chart';\r\nimport echartsBarTimelineChartInit from './charts/echarts/examples/bar-timeline-chart';\r\nimport echartsDoughnutRoundedChartInit from './charts/echarts/examples/doughnut-rounded-chart';\r\nimport echartsPieLabelAlignChartInit from './charts/echarts/examples/pie-label-align-chart';\r\nimport echartsRadarChartInit from './charts/echarts/examples/radar-chart';\r\nimport echartsRadarCustomizedChartInit from './charts/echarts/examples/radar-customized-chart';\r\nimport echartsRadarMultipleChartInit from './charts/echarts/examples/radar-multiple-chart';\r\nimport echartsPieMultipleChartInit from './charts/echarts/examples/pie-multiple-chart';\r\nimport echartsHeatMapChartInit from './charts/echarts/examples/heatmap-chart';\r\nimport echartsHeatMapSingleSeriesChartInit from './charts/echarts/examples/heatmap-single-series-chart';\r\nimport echartsBarStackedChartInit from './charts/echarts/examples/bar-stacked-chart';\r\nimport echartsPieEdgeAlignChartInit from './charts/echarts/examples/pie-edge-align-chart';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                            Theme Initialization                            */\r\n/* -------------------------------------------------------------------------- */\r\ndocReady(echartsLineChartInit);\r\ndocReady(echartsLineAreaChartInit);\r\ndocReady(echartsPieChartInit);\r\ndocReady(echartsBasicBarChartInit);\r\ndocReady(echartsDoughnutChartInit);\r\ndocReady(echartsStackedLineChartInit);\r\ndocReady(echartsStackedAreaChartInit);\r\ndocReady(echartsLineMarkerChartInit);\r\ndocReady(echartsAreaPiecesChartInit);\r\ndocReady(echartsLineRaceChartInit);\r\ndocReady(echartsStepLineChartInit);\r\ndocReady(echartsLineGradientChartInit);\r\ndocReady(echartsDynamicLineChartInit);\r\ndocReady(echartsHorizontalBarChartInit);\r\ndocReady(echartsBarNegativeChartInit);\r\ndocReady(echartsBarSeriesChartInit);\r\ndocReady(echartsWaterFallChartInit);\r\ndocReady(echartsHorizontalStackedChartInit);\r\ndocReady(echartsBarRaceChartInit);\r\ndocReady(echartsGradientBarChartInit);\r\ndocReady(echartsBarLineChartInit);\r\ndocReady(echartsBasicCandlestickChartInit);\r\ndocReady(echartsCandlestickMixedChartInit);\r\ndocReady(echartsUsaMapInit);\r\ndocReady(echartsScatterBasicChartInit);\r\ndocReady(echartsBubbleChartInit);\r\ndocReady(echartsScatterQuartetChartInit);\r\ndocReady(echartsScatterSingleAxisChartInit);\r\ndocReady(echartsBasicGaugeChartInit);\r\ndocReady(echartsGaugeProgressChartInit);\r\ndocReady(echartsGaugeRingChartInit);\r\ndocReady(echartsGaugeMultiRingChartInit);\r\ndocReady(echartsGaugeMultiTitleChartInit);\r\ndocReady(echartsGaugeGradeChartInit);\r\ndocReady(echartsLineLogChartInit);\r\ndocReady(echartsLineShareDatasetChartInit);\r\ndocReady(echartsBarTimelineChartInit);\r\ndocReady(echartsDoughnutRoundedChartInit);\r\ndocReady(echartsPieLabelAlignChartInit);\r\ndocReady(echartsRadarChartInit);\r\ndocReady(echartsRadarCustomizedChartInit);\r\ndocReady(echartsRadarMultipleChartInit);\r\ndocReady(echartsPieMultipleChartInit);\r\ndocReady(echartsHeatMapChartInit);\r\ndocReady(echartsHeatMapSingleSeriesChartInit);\r\ndocReady(echartsBarStackedChartInit);\r\ndocReady(echartsPieEdgeAlignChartInit);\r\n"]}